--[[

 ██████╗ ██╗  ██╗       ██╗   ██╗██╗   ██╗██╗    ██╗
██╔═══██╗╚██╗██╔╝       ██║   ██║██║   ██║██║    ██║
██║██╗██║ ╚███╔╝        ██║   ██║██║   ██║██║ █╗ ██║
██║██║██║ ██╔██╗        ╚██╗ ██╔╝╚██╗ ██╔╝██║███╗██║
╚█║████╔╝██╔╝ ██╗███████╗╚████╔╝  ╚████╔╝ ╚███╔███╔╝
 ╚╝╚═══╝ ╚═╝  ╚═╝╚══════╝ ╚═══╝    ╚═══╝   ╚══╝╚══╝ 

]]--

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local SoundService = game:GetService("SoundService")

local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    error("lynkUI: LocalPlayer not found - run as a LocalScript / exploit local")
end

-- Mobile detection
local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled

-- Enhanced Utilities
local function new(class, props)
    local inst = Instance.new(class)
    if type(props) == "table" then
        for k,v in pairs(props) do
            pcall(function() inst[k] = v end)
        end
    end
    return inst
end

local function createGradient(parent, colors, rotation)
    local gradient = new("UIGradient", {
        Color = ColorSequence.new(colors),
        Rotation = rotation or 0
    })
    gradient.Parent = parent
    return gradient
end

local function createGlow(parent, color, size)
    local glow = new("ImageLabel", {
        Name = "Glow",
        Parent = parent,
        BackgroundTransparency = 1,
        Image = "rbxasset://textures/ui/Glow.png",
        ImageColor3 = color or Color3.new(1,1,1),
        ImageTransparency = 0.8,
        Size = size or UDim2.new(1, 20, 1, 20),
        Position = UDim2.new(0, -10, 0, -10),
        ZIndex = parent.ZIndex - 1
    })
    return glow
end

-- Professional Color Palette with Mobile Scaling
local THEME = {
    WindowSize = isMobile and UDim2.new(0, 350, 0, 500) or UDim2.new(0, 880, 0, 560),
    
    -- Dark theme colors
    Background = Color3.fromRGB(11, 11, 13),
    Surface = Color3.fromRGB(15, 15, 17),
    Panel = Color3.fromRGB(19, 19, 22),
    Card = Color3.fromRGB(23, 23, 27),
    
    -- Accent colors
    Primary = Color3.fromRGB(88, 101, 242),    -- Discord-like purple
    Secondary = Color3.fromRGB(114, 137, 218), -- Lighter purple
    Success = Color3.fromRGB(67, 181, 129),    -- Green
    Warning = Color3.fromRGB(250, 166, 26),    -- Orange
    Danger = Color3.fromRGB(237, 66, 69),      -- Red
    
    -- Text colors
    Text = Color3.fromRGB(255, 255, 255),
    TextSecondary = Color3.fromRGB(185, 187, 190),
    TextMuted = Color3.fromRGB(114, 118, 125),
    
    -- Border and dividers
    Border = Color3.fromRGB(35, 35, 40),
    Divider = Color3.fromRGB(45, 45, 50),
    
    -- Corner radius
    CornerRadius = UDim.new(0, isMobile and 8 or 12),
    SmallCornerRadius = UDim.new(0, isMobile and 6 or 8),
    
    -- Animation settings
    FastTween = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    MediumTween = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    SlowTween = TweenInfo.new(0.4, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
}

-- Added key system variables and functions
local KEY_SYSTEM_ENABLED = true
local VALID_KEY = "4tB8vW1pR6sY9Jq"
local KEY_LINK = "https://sub2unlock.io/3HTi5"

-- Notification System
local NotificationContainer = nil
local ActiveNotifications = {}

local function createNotificationSystem()
    if NotificationContainer then return end
    
    NotificationContainer = new("ScreenGui", {
        Name = "LynkNotifications",
        ResetOnSpawn = false,
        DisplayOrder = 999999999,
        IgnoreGuiInset = true,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    NotificationContainer.Parent = game:GetService("CoreGui")
    
    local Container = new("Frame", {
        Name = "Container",
        Position = UDim2.new(1, -320, 0, 20),
        Size = UDim2.new(0, 300, 1, -40),
        BackgroundTransparency = 1,
        ZIndex = 999999
    })
    Container.Parent = NotificationContainer
    
    local Layout = new("UIListLayout", {
        Padding = UDim.new(0, 10),
        SortOrder = Enum.SortOrder.LayoutOrder,
        VerticalAlignment = Enum.VerticalAlignment.Top
    })
    Layout.Parent = Container
end

local function showNotification(title, message, duration, notifType)
    if not NotificationContainer then createNotificationSystem() end
    
    duration = duration or 4
    notifType = notifType or "info"
    
    local colors = {
        info = THEME.Primary,
        success = THEME.Success,
        warning = THEME.Warning,
        error = THEME.Danger
    }
    
    local icons = {
        info = "ℹ️",
        success = "✅",
        warning = "⚠️",
        error = "❌"
    }
    
    local notification = new("Frame", {
        Name = "Notification",
        Size = UDim2.new(1, 0, 0, 80),
        BackgroundColor3 = THEME.Surface,
        BorderSizePixel = 0,
        Position = UDim2.new(1, 50, 0, 0),
        ZIndex = 999999
    })
    notification.Parent = NotificationContainer.Container
    
    local corner = new("UICorner", {CornerRadius = THEME.SmallCornerRadius})
    corner.Parent = notification
    
    local stroke = new("UIStroke", {
        Color = colors[notifType],
        Thickness = 2
    })
    stroke.Parent = notification
    
    local icon = new("TextLabel", {
        Position = UDim2.new(0, 15, 0, 15),
        Size = UDim2.new(0, 30, 0, 30),
        BackgroundTransparency = 1,
        Text = icons[notifType],
        Font = Enum.Font.GothamBold,
        TextSize = 20,
        TextColor3 = colors[notifType],
        TextXAlignment = Enum.TextXAlignment.Center,
        ZIndex = 999999
    })
    icon.Parent = notification
    
    local titleLabel = new("TextLabel", {
        Position = UDim2.new(0, 55, 0, 10),
        Size = UDim2.new(1, -70, 0, 25),
        BackgroundTransparency = 1,
        Text = title,
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        TextColor3 = THEME.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 999999
    })
    titleLabel.Parent = notification
    
    local messageLabel = new("TextLabel", {
        Position = UDim2.new(0, 55, 0, 35),
        Size = UDim2.new(1, -70, 0, 35),
        BackgroundTransparency = 1,
        Text = message,
        Font = Enum.Font.Gotham,
        TextSize = 12,
        TextColor3 = THEME.TextSecondary,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        ZIndex = 999999
    })
    messageLabel.Parent = notification
    
    -- Slide in animation
    TweenService:Create(notification, THEME.MediumTween, {
        Position = UDim2.new(0, 0, 0, 0)
    }):Play()
    
    -- Play notification sound
    pcall(function()
        local sound = new("Sound", {
            SoundId = "rbxasset://sounds/electronicpingshort.wav",
            Volume = 0.5
        })
        sound.Parent = SoundService
        sound:Play()
        sound.Ended:Connect(function() sound:Destroy() end)
    end)
    
    -- Store notification reference
    table.insert(ActiveNotifications, notification)
    
    -- Auto cleanup with fallback
    local cleanupConnection
    local fallbackCleanup = task.delay(duration + 2, function()
        if notification and notification.Parent then
            notification:Destroy()
        end
    end)
    
    cleanupConnection = task.delay(duration, function()
        if notification and notification.Parent then
            -- Slide out animation
            TweenService:Create(notification, THEME.FastTween, {
                Position = UDim2.new(1, 50, 0, 0)
            }):Play()
            
            task.wait(0.2)
            if notification and notification.Parent then
                notification:Destroy()
            end
        end
        
        -- Remove from active notifications
        for i, notif in ipairs(ActiveNotifications) do
            if notif == notification then
                table.remove(ActiveNotifications, i)
                break
            end
        end
        
        task.cancel(fallbackCleanup)
    end)
    
    return notification
end

local function createKeySystem(Window)
    -- Force mouse unlock for first-person games
    pcall(function()
        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
    end)
    
    -- Key system ScreenGui with CoreGui override
    local keyScreen = new("ScreenGui", {
        Name = "KeySystem",
        ResetOnSpawn = false,
        DisplayOrder = 999999999,
        IgnoreGuiInset = true,
        ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    keyScreen.Parent = game:GetService("CoreGui")

    -- Background blur
    local keyBlurFrame = new("Frame", {
        Name = "KeyBlurContainer",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = Color3.new(0, 0, 0),
        BackgroundTransparency = 0.3,
        BorderSizePixel = 0,
        Visible = true,
        ZIndex = 999999
    })
    keyBlurFrame.Parent = keyScreen

    -- Main key window
    local keyWindow = new("Frame", {
        Name = "KeyWindow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = isMobile and UDim2.new(0, 320, 0, 220) or UDim2.new(0, 400, 0, 250),
        BackgroundColor3 = THEME.Background,
        BorderSizePixel = 0,
        ZIndex = 999999
    })
    keyWindow.Parent = keyBlurFrame
    
    local keyCorner = new("UICorner")
    keyCorner.CornerRadius = THEME.CornerRadius
    keyCorner.Parent = keyWindow

    -- Add glow effect
    createGlow(keyWindow, THEME.Primary)

    -- Close button
    local closeButton = new("TextButton", {
        Name = "CloseButton",
        Position = UDim2.new(1, -35, 0, 10),
        Size = UDim2.new(0, 25, 0, 25),
        BackgroundColor3 = THEME.Danger,
        BorderSizePixel = 0,
        Text = "×",
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        TextColor3 = THEME.Text,
        AutoButtonColor = false,
        ZIndex = 999999
    })
    closeButton.Parent = keyWindow
    
    local closeCorner = new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 6)
    closeCorner.Parent = closeButton

    -- Title
    local title = new("TextLabel", {
        Name = "Title",
        Position = UDim2.new(0, 0, 0, 20),
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        Text = "Lynk Universal",
        Font = Enum.Font.GothamBold,
        TextSize = isMobile and 16 or 18,
        TextColor3 = THEME.Text,
        TextXAlignment = Enum.TextXAlignment.Center,
        ZIndex = 999999
    })
    title.Parent = keyWindow

    -- Subtitle
    local subtitle = new("TextLabel", {
        Name = "Subtitle",
        Position = UDim2.new(0, 0, 0, 55),
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = "Key Login",
        Font = Enum.Font.Gotham,
        TextSize = isMobile and 12 or 14,
        TextColor3 = THEME.TextSecondary,
        TextXAlignment = Enum.TextXAlignment.Center,
        ZIndex = 999999
    })
    subtitle.Parent = keyWindow

    -- Key input
    local keyInput = new("TextBox", {
        Name = "KeyInput",
        Position = UDim2.new(0, 30, 0, 100),
        Size = UDim2.new(1, -60, 0, 35),
        BackgroundColor3 = THEME.Panel,
        BorderSizePixel = 0,
        PlaceholderText = "Enter your key here...",
        PlaceholderColor3 = THEME.TextMuted,
        Text = "",
        Font = Enum.Font.Gotham,
        TextSize = isMobile and 10 or 12,
        TextColor3 = THEME.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        ClearTextOnFocus = false,
        ZIndex = 999999
    })
    keyInput.Parent = keyWindow
    
    local inputCorner = new("UICorner")
    inputCorner.CornerRadius = THEME.SmallCornerRadius
    inputCorner.Parent = keyInput

    -- Add padding to input
    local inputPadding = new("UIPadding", {
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10)
    })
    inputPadding.Parent = keyInput

    -- Activate Key button
    local activateButton = new("TextButton", {
        Name = "ActivateButton",
        Position = UDim2.new(0, 30, 0, 155),
        Size = isMobile and UDim2.new(1, -60, 0, 35) or UDim2.new(0, 160, 0, 35),
        BackgroundColor3 = THEME.Warning,
        BorderSizePixel = 0,
        Text = "Activate Key",
        Font = Enum.Font.GothamSemibold,
        TextSize = isMobile and 10 or 12,
        TextColor3 = Color3.new(0, 0, 0),
        AutoButtonColor = false,
        ZIndex = 999999
    })
    activateButton.Parent = keyWindow
    
    local activateCorner = new("UICorner")
    activateCorner.CornerRadius = THEME.SmallCornerRadius
    activateCorner.Parent = activateButton

    -- Get Key button (only show on PC)
    local getKeyButton
    if not isMobile then
        getKeyButton = new("TextButton", {
            Name = "GetKeyButton",
            Position = UDim2.new(0, 210, 0, 155),
            Size = UDim2.new(0, 160, 0, 35),
            BackgroundColor3 = THEME.Panel,
            BorderSizePixel = 0,
            Text = "Get Key",
            Font = Enum.Font.GothamSemibold,
            TextSize = 12,
            TextColor3 = THEME.Text,
            AutoButtonColor = false,
            ZIndex = 999999
        })
        getKeyButton.Parent = keyWindow
        
        local getKeyCorner = new("UICorner")
        getKeyCorner.CornerRadius = THEME.SmallCornerRadius
        getKeyCorner.Parent = getKeyButton
    end

    -- Status message
    local statusMessage = new("TextLabel", {
        Name = "StatusMessage",
        Position = UDim2.new(0, 30, 0, isMobile and 200 or 205),
        Size = UDim2.new(1, -60, 0, 20),
        BackgroundTransparency = 1,
        Text = "",
        Font = Enum.Font.Gotham,
        TextSize = isMobile and 10 or 11,
        TextColor3 = THEME.TextSecondary,
        TextXAlignment = Enum.TextXAlignment.Center,
        ZIndex = 999999
    })
    statusMessage.Parent = keyWindow

    -- Make window draggable
    local dragging = false
    local dragStart = nil
    local startPos = nil

    keyWindow.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = keyWindow.Position
        end
    end)

    keyWindow.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            keyWindow.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    keyWindow.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)

    -- Button animations
    local function animateKeyButton(button, hoverColor, normalColor)
        button.MouseEnter:Connect(function()
            TweenService:Create(button, THEME.FastTween, {BackgroundColor3 = hoverColor}):Play()
        end)
        button.MouseLeave:Connect(function()
            TweenService:Create(button, THEME.FastTween, {BackgroundColor3 = normalColor}):Play()
        end)
    end

    animateKeyButton(activateButton, Color3.fromRGB(255, 180, 40), THEME.Warning)
    if getKeyButton then
        animateKeyButton(getKeyButton, THEME.Card, THEME.Panel)
    end
    animateKeyButton(closeButton, Color3.fromRGB(255, 80, 80), THEME.Danger)

    -- Get Key button functionality
    if getKeyButton then
        getKeyButton.MouseButton1Click:Connect(function()
            setclipboard(KEY_LINK)
            statusMessage.Text = "Link copied to clipboard! Paste it in your browser."
            statusMessage.TextColor3 = THEME.Success
            wait(3)
            statusMessage.Text = ""
        end)
    end

    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        keyScreen:Destroy()
    end)

    -- Activate Key button functionality
    activateButton.MouseButton1Click:Connect(function()
        local enteredKey = keyInput.Text
        
        if enteredKey == "" then
            statusMessage.Text = "Please enter a key!"
            statusMessage.TextColor3 = THEME.Danger
            return
        end

        statusMessage.Text = "Checking key..."
        statusMessage.TextColor3 = THEME.TextSecondary
        
        wait(1)
        
        if enteredKey == VALID_KEY then
            statusMessage.Text = "Success!"
            statusMessage.TextColor3 = THEME.Success
            
            -- Fade out all elements simultaneously
            local fadeOutTweens = {}
            
            -- Fade background
            table.insert(fadeOutTweens, TweenService:Create(keyBlurFrame, THEME.MediumTween, {BackgroundTransparency = 1}))
            
            -- Fade all child elements
            for _, child in pairs(keyWindow:GetDescendants()) do
                if child:IsA("GuiObject") then
                    local fadeProps = {BackgroundTransparency = 1}
                    if child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("TextBox") then
                        fadeProps.TextTransparency = 1
                    end
                    if child:IsA("ImageLabel") then
                        fadeProps.ImageTransparency = 1
                    end
                    table.insert(fadeOutTweens, TweenService:Create(child, THEME.MediumTween, fadeProps))
                end
            end
            
            -- Play all fade tweens
            for _, tween in pairs(fadeOutTweens) do
                tween:Play()
            end
            
            -- Wait for fade to complete then destroy and unlock window
            wait(THEME.MediumTween.Time + 0.1)
            keyScreen:Destroy()
            
            -- Unlock the window and show it
            Window._locked = false
            showNotification("Key System", "Authentication successful!", 3, "success")
            task.delay(0.1, function()
                Window:Show()
            end)
        else
            statusMessage.Text = "Invalid key!"
            statusMessage.TextColor3 = THEME.Danger
            showNotification("Key System", "Invalid key entered!", 3, "error")
        end
    end)

    -- Enter key support
    keyInput.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            activateButton.MouseButton1Click:Fire()
        end
    end)

    return keyScreen
end

local Lynk = {}
Lynk.__index = Lynk

function Lynk:CreateWindow(opts)
    opts = opts or {}
    local Window = {}
    Window._tabs = {}
    Window._currentTab = nil
    Window._accent = opts.Accent or THEME.Primary
    Window._logo = opts.Logo or "rbxassetid://17673929618"
    Window._title = opts.Title or (opts.Name or "lynkUI v2.0")
    Window._subtitle = opts.Subtitle or "Universal Script Hub"
    Window._uiKey = opts.DefaultKeybind or Enum.KeyCode.Insert
    Window._shown = false
    Window._minimized = false
    Window._destroyed = false

    -- Gate the window but still build it (no early return)
    Window._locked = KEY_SYSTEM_ENABLED == true

    -- Create ScreenGui with CoreGui override
    local screen = new("ScreenGui", {
        Name = opts.Name or "lynkUI",
        ResetOnSpawn = false,
        DisplayOrder = 999999998,
        IgnoreGuiInset = true,
        ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    screen.Parent = game:GetService("CoreGui")

    -- Mobile toggle button
    local MobileToggle = nil
    if isMobile then
        MobileToggle = new("TextButton", {
            Name = "MobileToggle",
            Position = UDim2.new(1, -60, 0.5, -25),
            Size = UDim2.new(0, 50, 0, 50),
            BackgroundColor3 = THEME.Primary,
            BorderSizePixel = 0,
            Text = "→",
            Font = Enum.Font.GothamBold,
            TextSize = 20,
            TextColor3 = THEME.Text,
            AutoButtonColor = false,
            ZIndex = 999999
        })
        MobileToggle.Parent = screen
        
        local mobileCorner = new("UICorner")
        mobileCorner.CornerRadius = UDim.new(0.5, 0)
        mobileCorner.Parent = MobileToggle
        
        -- Make mobile toggle draggable
        local mobileDragging = false
        local mobileDragStart = nil
        local mobileStartPos = nil
        
        MobileToggle.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                mobileDragging = true
                mobileDragStart = input.Position
                mobileStartPos = MobileToggle.Position
            end
        end)
        
        MobileToggle.InputChanged:Connect(function(input)
            if mobileDragging and input.UserInputType == Enum.UserInputType.Touch then
                local delta = input.Position - mobileDragStart
                MobileToggle.Position = UDim2.new(mobileStartPos.X.Scale, mobileStartPos.X.Offset + delta.X, mobileStartPos.Y.Scale, mobileStartPos.Y.Offset + delta.Y)
            end
        end)
        
        MobileToggle.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Touch then
                mobileDragging = false
            end
        end)
    end

    -- Main container with blur effect
    local BlurFrame = new("Frame", {
        Name = "BlurContainer",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundColor3 = Color3.new(0, 0, 0),
        BackgroundTransparency = 0.3,
        BorderSizePixel = 0,
        Visible = false,
        ZIndex = 999998
    })
    BlurFrame.Parent = screen

    -- Main window outline
    local Outline = new("Frame", {
        Name = "Outline",
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = THEME.Border,
        BorderSizePixel = 0,
        ZIndex = 999998
    })
    Outline.Parent = BlurFrame
    
    local outlineCorner = new("UICorner")
    outlineCorner.CornerRadius = THEME.CornerRadius
    outlineCorner.Parent = Outline

    -- Add subtle glow to outline
    createGlow(Outline, Window._accent)

    -- Main content frame
    local MainFrame = new("Frame", {
        Name = "MainFrame",
        Position = UDim2.new(0, 2, 0, 2),
        Size = UDim2.new(1, -4, 1, -4),
        BackgroundColor3 = THEME.Background,
        BorderSizePixel = 0,
        ZIndex = 999998
    })
    MainFrame.Parent = Outline
    
    local mainCorner = new("UICorner")
    mainCorner.CornerRadius = THEME.CornerRadius
    mainCorner.Parent = MainFrame

    -- Sidebar (left panel) - responsive for mobile
    local Sidebar = new("Frame", {
        Name = "Sidebar",
        Size = isMobile and UDim2.new(1, 0, 0, 120) or UDim2.new(0, 280, 1, 0),
        BackgroundColor3 = THEME.Surface,
        BorderSizePixel = 0,
        ZIndex = 999998
    })
    Sidebar.Parent = MainFrame
    
    local sidebarCorner = new("UICorner")
    sidebarCorner.CornerRadius = THEME.CornerRadius
    sidebarCorner.Parent = Sidebar

    -- Sidebar gradient
    createGradient(Sidebar, {
        ColorSequenceKeypoint.new(0, THEME.Surface),
        ColorSequenceKeypoint.new(1, THEME.Panel)
    }, isMobile and 0 or 90)

    -- Player Profile Section (responsive)
    local ProfileContainer = new("Frame", {
        Name = "ProfileContainer",
        Position = isMobile and UDim2.new(0, 10, 0, 10) or UDim2.new(0, 20, 0, 20),
        Size = isMobile and UDim2.new(1, -20, 0, 60) or UDim2.new(1, -40, 0, 80),
        BackgroundColor3 = THEME.Card,
        BorderSizePixel = 0,
        ZIndex = 999998
    })
    ProfileContainer.Parent = Sidebar
    
    local profileCorner = new("UICorner")
    profileCorner.CornerRadius = THEME.SmallCornerRadius
    profileCorner.Parent = ProfileContainer

    -- Player avatar (circular) - responsive
    local AvatarContainer = new("Frame", {
        Name = "AvatarContainer",
        Position = UDim2.new(0, 12, 0, isMobile and 6 or 12),
        Size = isMobile and UDim2.new(0, 48, 0, 48) or UDim2.new(0, 56, 0, 56),
        BackgroundColor3 = THEME.Primary,
        BorderSizePixel = 0,
        ZIndex = 999998
    })
    AvatarContainer.Parent = ProfileContainer
    
    local avatarCorner = new("UICorner")
    avatarCorner.CornerRadius = UDim.new(0.5, 0)
    avatarCorner.Parent = AvatarContainer

    local PlayerAvatar = new("ImageLabel", {
        Name = "PlayerAvatar",
        Position = UDim2.new(0, 2, 0, 2),
        Size = UDim2.new(1, -4, 1, -4),
        Image = Players:GetUserThumbnailAsync(LocalPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420),
        BackgroundTransparency = 1,
        ScaleType = Enum.ScaleType.Crop,
        ZIndex = 999998
    })
    PlayerAvatar.Parent = AvatarContainer
    
    local playerAvatarCorner = new("UICorner")
    playerAvatarCorner.CornerRadius = UDim.new(0.5, 0)
    playerAvatarCorner.Parent = PlayerAvatar

    -- Player username (responsive)
    local PlayerName = new("TextLabel", {
        Name = "PlayerName",
        Position = isMobile and UDim2.new(0, 70, 0, 8) or UDim2.new(0, 80, 0, 15),
        Size = isMobile and UDim2.new(1, -80, 0, 20) or UDim2.new(1, -92, 0, 24),
        BackgroundTransparency = 1,
        Text = "@" .. LocalPlayer.Name,
        Font = Enum.Font.GothamBold,
        TextSize = isMobile and 12 or 16,
        TextColor3 = THEME.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextTruncate = Enum.TextTruncate.AtEnd,
        ZIndex = 999998
    })
    PlayerName.Parent = ProfileContainer

    -- Online status indicator (responsive)
    local StatusIndicator = new("Frame", {
        Name = "StatusIndicator",
        Position = isMobile and UDim2.new(0, 70, 0, 32) or UDim2.new(0, 80, 0, 42),
        Size = UDim2.new(0, 8, 0, 8),
        BackgroundColor3 = THEME.Success,
        BorderSizePixel = 0,
        ZIndex = 999998
    })
    StatusIndicator.Parent = ProfileContainer
    
    local statusCorner = new("UICorner")
    statusCorner.CornerRadius = UDim.new(0.5, 0)
    statusCorner.Parent = StatusIndicator

    local StatusText = new("TextLabel", {
        Name = "StatusText",
        Position = isMobile and UDim2.new(0, 86, 0, 28) or UDim2.new(0, 96, 0, 38),
        Size = isMobile and UDim2.new(1, -96, 0, 16) or UDim2.new(1, -108, 0, 16),
        BackgroundTransparency = 1,
        Text = "Online",
        Font = Enum.Font.Gotham,
        TextSize = isMobile and 10 or 12,
        TextColor3 = THEME.TextSecondary,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 999998
    })
    StatusText.Parent = ProfileContainer

    -- Tabs container (responsive)
    local TabsContainer = new("Frame", {
        Name = "TabsContainer",
        Position = isMobile and UDim2.new(0, 10, 0, 80) or UDim2.new(0, 20, 0, 120),
        Size = isMobile and UDim2.new(1, -20, 0, 30) or UDim2.new(1, -40, 1, -140),
        BackgroundTransparency = 1,
        ZIndex = 999998
    })
    TabsContainer.Parent = Sidebar

    local tabsLayout = new("UIListLayout")
    tabsLayout.Parent = TabsContainer
    tabsLayout.Padding = UDim.new(0, isMobile and 5 or 8)
    tabsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabsLayout.FillDirection = isMobile and Enum.FillDirection.Horizontal or Enum.FillDirection.Vertical

    -- Content area (responsive)
    local ContentArea = new("Frame", {
        Name = "ContentArea",
        Position = isMobile and UDim2.new(0, 0, 0, 120) or UDim2.new(0, 280, 0, 0),
        Size = isMobile and UDim2.new(1, 0, 1, -120) or UDim2.new(1, -280, 1, 0),
        BackgroundTransparency = 1,
        ZIndex = 999998
    })
    ContentArea.Parent = MainFrame

    -- Top bar in content area (responsive)
    local TopBar = new("Frame", {
        Name = "TopBar",
        Size = UDim2.new(1, 0, 0, isMobile and 60 or 80),
        BackgroundTransparency = 1,
        ZIndex = 999998
    })
    TopBar.Parent = ContentArea

    -- Title section (responsive)
    local TitleContainer = new("Frame", {
        Name = "TitleContainer",
        Position = isMobile and UDim2.new(0, 15, 0, 10) or UDim2.new(0, 30, 0, 20),
        Size = UDim2.new(0.6, 0, 0, 40),
        BackgroundTransparency = 1,
        ZIndex = 999998
    })
    TitleContainer.Parent = TopBar

    local MainTitle = new("TextLabel", {
        Name = "MainTitle",
        Size = UDim2.new(1, 0, 0, 24),
        BackgroundTransparency = 1,
        Text = Window._title,
        Font = Enum.Font.GothamBold,
        TextSize = isMobile and 18 or 24,
        TextColor3 = THEME.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 999998
    })
    MainTitle.Parent = TitleContainer

    local Subtitle = new("TextLabel", {
        Name = "Subtitle",
        Position = UDim2.new(0, 0, 0, 24),
        Size = UDim2.new(1, 0, 0, 16),
        BackgroundTransparency = 1,
        Text = Window._subtitle,
        Font = Enum.Font.Gotham,
        TextSize = isMobile and 10 or 14,
        TextColor3 = THEME.TextMuted,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 999998
    })
    Subtitle.Parent = TitleContainer

    -- Minimize button (responsive)
    local MinimizeButton = new("TextButton", {
        Name = "MinimizeButton",
        Position = isMobile and UDim2.new(1, -100, 0, 10) or UDim2.new(1, -110, 0, 20),
        Size = UDim2.new(0, 40, 0, 40),
        BackgroundColor3 = THEME.Warning,
        Text = "−",
        Font = Enum.Font.GothamBold,
        TextSize = isMobile and 16 or 20,
        TextColor3 = Color3.new(0, 0, 0),
        AutoButtonColor = false,
        ZIndex = 999998
    })
    MinimizeButton.Parent = TopBar
    
    local minimizeCorner = new("UICorner")
    minimizeCorner.CornerRadius = THEME.SmallCornerRadius
    minimizeCorner.Parent = MinimizeButton

    -- Close button (responsive)
    local CloseButton = new("TextButton", {
        Name = "CloseButton",
        Position = isMobile and UDim2.new(1, -50, 0, 10) or UDim2.new(1, -60, 0, 20),
        Size = UDim2.new(0, 40, 0, 40),
        BackgroundColor3 = THEME.Danger,
        Text = "×",
        Font = Enum.Font.GothamBold,
        TextSize = isMobile and 16 or 20,
        TextColor3 = THEME.Text,
        AutoButtonColor = false,
        ZIndex = 999998
    })
    CloseButton.Parent = TopBar
    
    local closeCorner = new("UICorner")
    closeCorner.CornerRadius = THEME.SmallCornerRadius
    closeCorner.Parent = CloseButton

    -- Button hover effects
    local function animateButton(button, hoverColor, normalColor)
        button.MouseEnter:Connect(function()
            TweenService:Create(button, THEME.FastTween, {BackgroundColor3 = hoverColor}):Play()
        end)
        button.MouseLeave:Connect(function()
            TweenService:Create(button, THEME.FastTween, {BackgroundColor3 = normalColor}):Play()
        end)
    end
    
    animateButton(MinimizeButton, Color3.fromRGB(255, 180, 40), THEME.Warning)
    animateButton(CloseButton, Color3.fromRGB(220, 50, 50), THEME.Danger)

    -- Create minimized taskbar
    local MinimizedTaskbar = new("Frame", {
        Name = "MinimizedTaskbar",
        AnchorPoint = Vector2.new(0.5, 1),
        Position = UDim2.new(0.5, 0, 1, -20),
        Size = isMobile and UDim2.new(0, 200, 0, 40) or UDim2.new(0, 250, 0, 50),
        BackgroundColor3 = THEME.Surface,
        BorderSizePixel = 0,
        Visible = false,
        ZIndex = 999999
    })
    MinimizedTaskbar.Parent = screen
    
    local taskbarCorner = new("UICorner")
    taskbarCorner.CornerRadius = THEME.SmallCornerRadius
    taskbarCorner.Parent = MinimizedTaskbar
    
    local taskbarStroke = new("UIStroke", {
        Color = THEME.Primary,
        Thickness = 2
    })
    taskbarStroke.Parent = MinimizedTaskbar

    local TaskbarTitle = new("TextLabel", {
        Name = "TaskbarTitle",
        Position = UDim2.new(0, 15, 0, 0),
        Size = isMobile and UDim2.new(1, -80, 1, 0) or UDim2.new(1, -100, 1, 0),
        BackgroundTransparency = 1,
        Text = "Lynk Universal",
        Font = Enum.Font.GothamBold,
        TextSize = isMobile and 12 or 16,
        TextColor3 = THEME.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Center,
        ZIndex = 999999
    })
    TaskbarTitle.Parent = MinimizedTaskbar

    local ExpandButton = new("TextButton", {
        Name = "ExpandButton",
        Position = isMobile and UDim2.new(1, -70, 0.5, -15) or UDim2.new(1, -80, 0.5, -15),
        Size = UDim2.new(0, 30, 0, 30),
        BackgroundColor3 = THEME.Primary,
        Text = "⬜",
        Font = Enum.Font.GothamBold,
        TextSize = isMobile and 12 or 16,
        TextColor3 = THEME.Text,
        AutoButtonColor = false,
        ZIndex = 999999
    })
    ExpandButton.Parent = MinimizedTaskbar
    
    local expandCorner = new("UICorner")
    expandCorner.CornerRadius = THEME.SmallCornerRadius
    expandCorner.Parent = ExpandButton

    local TaskbarCloseButton = new("TextButton", {
        Name = "TaskbarCloseButton",
        Position = isMobile and UDim2.new(1, -35, 0.5, -15) or UDim2.new(1, -40, 0.5, -15),
        Size = UDim2.new(0, 30, 0, 30),
        BackgroundColor3 = THEME.Danger,
        Text = "×",
        Font = Enum.Font.GothamBold,
        TextSize = isMobile and 12 or 16,
        TextColor3 = THEME.Text,
        AutoButtonColor = false,
        ZIndex = 999999
    })
    TaskbarCloseButton.Parent = MinimizedTaskbar
    
    local taskbarCloseCorner = new("UICorner")
    taskbarCloseCorner.CornerRadius = THEME.SmallCornerRadius
    taskbarCloseCorner.Parent = TaskbarCloseButton

    -- Make taskbar draggable
    local taskbarDragging = false
    local taskbarDragStart = nil
    local taskbarStartPos = nil

    MinimizedTaskbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            taskbarDragging = true
            taskbarDragStart = input.Position
            taskbarStartPos = MinimizedTaskbar.Position
        end
    end)

    MinimizedTaskbar.InputChanged:Connect(function(input)
        if taskbarDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - taskbarDragStart
            MinimizedTaskbar.Position = UDim2.new(taskbarStartPos.X.Scale, taskbarStartPos.X.Offset + delta.X, taskbarStartPos.Y.Scale, taskbarStartPos.Y.Offset + delta.Y)
        end
    end)

    MinimizedTaskbar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            taskbarDragging = false
        end
    end)

    -- Create confirmation popup
    local ConfirmationPopup = new("Frame", {
        Name = "ConfirmationPopup",
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = THEME.Background,
        BorderSizePixel = 0,
        Visible = false,
        ZIndex = 999999
    })
    ConfirmationPopup.Parent = BlurFrame
    
    local popupCorner = new("UICorner")
    popupCorner.CornerRadius = THEME.CornerRadius
    popupCorner.Parent = ConfirmationPopup

    -- Popup outline
    local PopupOutline = new("UIStroke", {
        Color = THEME.Border,
        Thickness = 2
    })
    PopupOutline.Parent = ConfirmationPopup

    -- Popup title
    local PopupTitle = new("TextLabel", {
        Name = "PopupTitle",
        Position = UDim2.new(0, 20, 0, 20),
        Size = UDim2.new(1, -40, 0, 30),
        BackgroundTransparency = 1,
        Text = "Confirm Close",
        Font = Enum.Font.GothamBold,
        TextSize = isMobile and 16 or 18,
        TextColor3 = THEME.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 999999
    })
    PopupTitle.Parent = ConfirmationPopup

    -- Popup message
    local PopupMessage = new("TextLabel", {
        Name = "PopupMessage",
        Position = UDim2.new(0, 20, 0, 60),
        Size = UDim2.new(1, -40, 0, 60),
        BackgroundTransparency = 1,
        Text = isMobile and "Are you sure you want to close?\nInstead tap the mobile button to toggle the UI." or "Are you sure you want to close?\nInstead press Insert to toggle the UI.",
        Font = Enum.Font.Gotham,
        TextSize = isMobile and 12 or 14,
        TextColor3 = THEME.TextSecondary,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        ZIndex = 999999
    })
    PopupMessage.Parent = ConfirmationPopup

    -- Yes button (green)
    local YesButton = new("TextButton", {
        Name = "YesButton",
        Position = UDim2.new(0, 20, 1, -60),
        Size = UDim2.new(0, 100, 0, 40),
        BackgroundColor3 = Color3.fromRGB(46, 160, 67),
        Text = "Yes",
        Font = Enum.Font.GothamSemibold,
        TextSize = isMobile and 14 or 16,
        TextColor3 = Color3.new(1, 1, 1),
        AutoButtonColor = false,
        ZIndex = 999999
    })
    YesButton.Parent = ConfirmationPopup
    
    local yesCorner = new("UICorner")
    yesCorner.CornerRadius = THEME.SmallCornerRadius
    yesCorner.Parent = YesButton

    -- No button (red)
    local NoButton = new("TextButton", {
        Name = "NoButton",
        Position = UDim2.new(1, -120, 1, -60),
        Size = UDim2.new(0, 100, 0, 40),
        BackgroundColor3 = Color3.fromRGB(220, 50, 50),
        Text = "No",
        Font = Enum.Font.GothamSemibold,
        TextSize = isMobile and 14 or 16,
        TextColor3 = Color3.new(1, 1, 1),
        AutoButtonColor = false,
        ZIndex = 999999
    })
    NoButton.Parent = ConfirmationPopup
    
    local noCorner = new("UICorner")
    noCorner.CornerRadius = THEME.SmallCornerRadius
    noCorner.Parent = NoButton

    -- Button hover effects for popup buttons
    animateButton(YesButton, Color3.fromRGB(56, 180, 77), Color3.fromRGB(46, 160, 67))
    animateButton(NoButton, Color3.fromRGB(240, 70, 70), Color3.fromRGB(220, 50, 50))
    animateButton(ExpandButton, Color3.fromRGB(108, 121, 255), THEME.Primary)
    animateButton(TaskbarCloseButton, Color3.fromRGB(255, 80, 80), THEME.Danger)

    -- Pages container with smooth transitions
    local PagesContainer = new("Frame", {
        Name = "PagesContainer",
        Position = isMobile and UDim2.new(0, 15, 0, 60) or UDim2.new(0, 30, 0, 80),
        Size = isMobile and UDim2.new(1, -30, 1, -80) or UDim2.new(1, -60, 1, -100),
        BackgroundTransparency = 1,
        ClipsDescendants = true,
        ZIndex = 999998
    })
    PagesContainer.Parent = ContentArea

    -- Store references
    Window._screen = screen
    Window._blurFrame = BlurFrame
    Window._outline = Outline
    Window._mainFrame = MainFrame
    Window._sidebar = Sidebar
    Window._tabsContainer = TabsContainer
    Window._pagesContainer = PagesContainer
    Window._titleLabel = MainTitle
    Window._subtitleLabel = Subtitle
    Window._minimizedTaskbar = MinimizedTaskbar
    Window._mobileToggle = MobileToggle

    -- Dragging functionality
    local dragging = false
    local dragStart = nil
    local startPos = nil

    local function updateDrag(input)
        if dragging then
            local delta = input.Position - dragStart
            local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, 
                                   startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            TweenService:Create(Outline, THEME.FastTween, {Position = newPos}):Play()
        end
    end

    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = Outline.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            updateDrag(input)
        end
    end)

    -- Window visibility and state management
    local isVisible = false
    
    local function setVisibility(visible)
        if Window._destroyed then return end
        
        isVisible = visible
        BlurFrame.Visible = visible
        Window._minimized = false
        MinimizedTaskbar.Visible = false
        
        if MobileToggle then
            MobileToggle.Text = visible and "←" or "→"
        end
        
        if visible then
            -- Animate window opening
            Outline.Size = UDim2.new(0, 0, 0, 0)
            TweenService:Create(Outline, THEME.SlowTween, {
                Size = THEME.WindowSize
            }):Play()
            showNotification("UI Status", "User interface is now visible", 3, "info")
        else
            -- Animate window closing
            TweenService:Create(Outline, THEME.MediumTween, {
                Size = UDim2.new(0, 0, 0, 0)
            }):Play()
            
            task.wait(0.25)
            if not isVisible and not Window._destroyed then
                BlurFrame.Visible = false
            end
            showNotification("UI Status", "User interface is now hidden", 3, "info")
        end
    end

    local function setMinimized(minimized)
        if Window._destroyed then return end
        
        Window._minimized = minimized
        BlurFrame.Visible = not minimized
        MinimizedTaskbar.Visible = minimized
        
        if MobileToggle then
            MobileToggle.Visible = not minimized
        end
        
        if minimized then
            showNotification("UI Status", "User interface minimized", 3, "info")
        else
            isVisible = true
            setVisibility(true)
            showNotification("UI Status", "User interface restored", 3, "info")
        end
    end

    -- Show/Hide functions that respect the lock
    function Window:Show()
        if Window._locked then return end
        if Window._destroyed then return end
        if isVisible and not Window._minimized then return end
        
        if Window._minimized then
            setMinimized(false)
        else
            setVisibility(true)
        end
        
        -- Load script cards on first show
        if not Window._cardsLoaded then
            Window:LoadScriptCards()
            Window._cardsLoaded = true
        end
    end

    function Window:Hide()
        if Window._destroyed then return end
        if not isVisible and not Window._minimized then return end
        setVisibility(false)
    end

    function Window:Minimize()
        if Window._destroyed then return end
        if Window._minimized then return end
        setMinimized(true)
    end

    function Window:Destroy()
        Window._destroyed = true
        
        -- Clean up notifications
        for _, notification in ipairs(ActiveNotifications) do
            if notification and notification.Parent then
                notification:Destroy()
            end
        end
        ActiveNotifications = {}
        
        if screen and screen.Parent then
            screen:Destroy()
        end
        
        if NotificationContainer and NotificationContainer.Parent then
            NotificationContainer:Destroy()
            NotificationContainer = nil
        end
    end

    -- Button click handlers
    MinimizeButton.MouseButton1Click:Connect(function()
        Window:Minimize()
    end)

    ExpandButton.MouseButton1Click:Connect(function()
        Window:Show()
    end)

    TaskbarCloseButton.MouseButton1Click:Connect(function()
        ConfirmationPopup.Visible = true
        ConfirmationPopup.Size = UDim2.new(0, 0, 0, 0)
        TweenService:Create(ConfirmationPopup, THEME.MediumTween, {
            Size = isMobile and UDim2.new(0, 320, 0, 180) or UDim2.new(0, 400, 0, 200)
        }):Play()
    end)

    CloseButton.MouseButton1Click:Connect(function()
        ConfirmationPopup.Visible = true
        ConfirmationPopup.Size = UDim2.new(0, 0, 0, 0)
        TweenService:Create(ConfirmationPopup, THEME.MediumTween, {
            Size = isMobile and UDim2.new(0, 320, 0, 180) or UDim2.new(0, 400, 0, 200)
        }):Play()
    end)

    -- Yes button closes the entire UI
    YesButton.MouseButton1Click:Connect(function()
        Window:Destroy()
    end)

    -- No button hides the popup with improved fade animation
    NoButton.MouseButton1Click:Connect(function()
        -- Fade all popup elements simultaneously
        local fadeOutTweens = {}
        
        for _, child in pairs(ConfirmationPopup:GetDescendants()) do
            if child:IsA("GuiObject") then
                local fadeProps = {BackgroundTransparency = 1}
                if child:IsA("TextLabel") or child:IsA("TextButton") then
                    fadeProps.TextTransparency = 1
                end
                table.insert(fadeOutTweens, TweenService:Create(child, THEME.FastTween, fadeProps))
            end
        end
        
        -- Fade popup background
        table.insert(fadeOutTweens, TweenService:Create(ConfirmationPopup, THEME.FastTween, {BackgroundTransparency = 1}))
        
        -- Play all fade tweens
        for _, tween in pairs(fadeOutTweens) do
            tween:Play()
        end
        
        -- Hide popup after fade
        task.wait(0.2)
        ConfirmationPopup.Visible = false
        
        -- Reset transparency for next use
        for _, child in pairs(ConfirmationPopup:GetDescendants()) do
            if child:IsA("GuiObject") then
                child.BackgroundTransparency = child.Name == "ConfirmationPopup" and 0 or (child:IsA("TextLabel") and 1 or 0)
                if child:IsA("TextLabel") or child:IsA("TextButton") then
                    child.TextTransparency = 0
                end
            end
        end
        ConfirmationPopup.BackgroundTransparency = 0
    end)

    -- Mobile toggle functionality
    if MobileToggle then
        MobileToggle.MouseButton1Click:Connect(function()
            if Window._locked then return end
            
            if Window._minimized then
                Window:Show()
            elseif isVisible then
                Window:Hide()
            else
                Window:Show()
            end
        end)
    end

    -- Keybind listener that ignores presses while locked
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if Window._destroyed then return end
        if input.KeyCode == Window._uiKey then
            if Window._locked then return end -- ignore until unlocked
            
            if Window._minimized then
                Window:Show()
            elseif isVisible then
                Window:Hide()
            else
                Window:Show()
            end
        end
    end)

    -- Tab creation and management with proper UI library functions
    function Window:CreateTab(name, icon, layoutOrder)
        local tab = {
            Name = name,
            Icon = icon or "",
            LayoutOrder = layoutOrder or (#Window._tabs + 1),
            Active = false,
            Elements = {}
        }

        -- Tab button (responsive)
        local TabButton = new("TextButton", {
            Name = name .. "_TabButton",
            Size = isMobile and UDim2.new(0, 80, 1, 0) or UDim2.new(1, 0, 0, 48),
            BackgroundColor3 = Color3.fromRGB(0, 0, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Text = isMobile and "" or name,
            Font = Enum.Font.GothamSemibold,
            TextSize = isMobile and 10 or 15,
            TextColor3 = THEME.TextMuted,
            TextXAlignment = Enum.TextXAlignment.Center,
            AutoButtonColor = false,
            LayoutOrder = tab.LayoutOrder,
            ZIndex = 999998
        })
        TabButton.Parent = TabsContainer
        
        local tabCorner = new("UICorner")
        tabCorner.CornerRadius = THEME.SmallCornerRadius
        tabCorner.Parent = TabButton

        -- Tab icon (responsive)
        local TabIcon = new("ImageLabel", {
            Name = "TabIcon",
            Position = isMobile and UDim2.new(0.5, -10, 0, 5) or UDim2.new(0, 16, 0.5, -10),
            Size = UDim2.new(0, 20, 0, 20),
            BackgroundTransparency = 1,
            Image = tab.Icon,
            ImageColor3 = THEME.TextMuted,
            ScaleType = Enum.ScaleType.Fit,
            ZIndex = 999998
        })
        TabIcon.Parent = TabButton

        -- Tab text (mobile shows below icon)
        if isMobile then
            local TabText = new("TextLabel", {
                Name = "TabText",
                Position = UDim2.new(0, 0, 1, -15),
                Size = UDim2.new(1, 0, 0, 12),
                BackgroundTransparency = 1,
                Text = name,
                Font = Enum.Font.Gotham,
                TextSize = 8,
                TextColor3 = THEME.TextMuted,
                TextXAlignment = Enum.TextXAlignment.Center,
                ZIndex = 999998
            })
            TabText.Parent = TabButton
            tab.Text = TabText
        else
            local TabText = new("TextLabel", {
                Name = "TabText",
                Position = UDim2.new(0, 48, 0, 0),
                Size = UDim2.new(1, -60, 1, 0),
                BackgroundTransparency = 1,
                Text = name,
                Font = Enum.Font.GothamSemibold,
                TextSize = 15,
                TextColor3 = THEME.TextMuted,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 999998
            })
            TabText.Parent = TabButton
            tab.Text = TabText
        end

        -- Active indicator (not shown on mobile)
        local ActiveIndicator
        if not isMobile then
            ActiveIndicator = new("Frame", {
                Name = "ActiveIndicator",
                Position = UDim2.new(0, 0, 0.5, -12),
                Size = UDim2.new(0, 3, 0, 24),
                BackgroundColor3 = Window._accent,
                BorderSizePixel = 0,
                Visible = false,
                ZIndex = 999998
            })
            ActiveIndicator.Parent = TabButton
            
            local indicatorCorner = new("UICorner")
            indicatorCorner.CornerRadius = UDim.new(0, 2)
            indicatorCorner.Parent = ActiveIndicator
        end

        -- Tab page
        local TabPage = new("ScrollingFrame", {
            Name = name .. "_Page",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 6,
            ScrollBarImageColor3 = THEME.Primary,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            Visible = false,
            ZIndex = 999998
        })
        TabPage.Parent = PagesContainer

        -- Add layout and padding to tab page
        local PageLayout = new("UIListLayout", {
            Padding = UDim.new(0, 10),
            SortOrder = Enum.SortOrder.LayoutOrder
        })
        PageLayout.Parent = TabPage

        local PagePadding = new("UIPadding", {
            PaddingAll = UDim.new(0, 15)
        })
        PagePadding.Parent = TabPage

        -- Tab functions
        function tab:Show()
            -- Hide all other tabs
            for _, otherTab in pairs(Window._tabs) do
                if otherTab ~= tab then
                    otherTab:Hide()
                end
            end
            
            -- Show this tab
            tab.Active = true
            Window._currentTab = tab
            
            -- Animate tab appearance
            TabPage.Position = UDim2.new(1, 0, 0, 0)
            TabPage.Visible = true
            
            TweenService:Create(TabPage, THEME.MediumTween, {
                Position = UDim2.new(0, 0, 0, 0)
            }):Play()
            
            -- Update button appearance
            TweenService:Create(TabButton, THEME.FastTween, {
                BackgroundTransparency = 0,
                BackgroundColor3 = Color3.fromRGB(255, 255, 255):lerp(Window._accent, 0.9)
            }):Play()
            
            if tab.Text then
                TweenService:Create(tab.Text, THEME.FastTween, {TextColor3 = THEME.Text}):Play()
            end
            TweenService:Create(TabIcon, THEME.FastTween, {ImageColor3 = Window._accent}):Play()
            
            if ActiveIndicator then
                ActiveIndicator.Visible = true
            end
        end
        
        function tab:Hide()
            tab.Active = false
            
            -- Animate tab disappearance
            if TabPage.Visible then
                TweenService:Create(TabPage, THEME.FastTween, {
                    Position = UDim2.new(-1, 0, 0, 0)
                }):Play()
                
                task.wait(0.15)
                TabPage.Visible = false
                TabPage.Position = UDim2.new(0, 0, 0, 0)
            end
            
            -- Reset button appearance
            TweenService:Create(TabButton, THEME.FastTween, {
                BackgroundTransparency = 1
            }):Play()
            
            if tab.Text then
                TweenService:Create(tab.Text, THEME.FastTween, {TextColor3 = THEME.TextMuted}):Play()
            end
            TweenService:Create(TabIcon, THEME.FastTween, {ImageColor3 = THEME.TextMuted}):Play()
            
            if ActiveIndicator then
                ActiveIndicator.Visible = false
            end
        end

        -- UI Library Functions for Tab Content Creation
        function tab:CreateLabel(text, textSize)
            local label = new("TextLabel", {
                Name = "Label_" .. #tab.Elements,
                Size = UDim2.new(1, 0, 0, textSize and (textSize + 10) or 30),
                BackgroundTransparency = 1,
                Text = text or "Label",
                Font = Enum.Font.Gotham,
                TextSize = textSize or (isMobile and 12 or 14),
                TextColor3 = THEME.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center,
                TextWrapped = true,
                LayoutOrder = #tab.Elements + 1,
                ZIndex = 999998
            })
            label.Parent = TabPage
            table.insert(tab.Elements, label)
            return label
        end

        function tab:CreateButton(text, callback)
            local button = new("TextButton", {
                Name = "Button_" .. #tab.Elements,
                Size = UDim2.new(1, 0, 0, isMobile and 35 or 40),
                BackgroundColor3 = Window._accent,
                BorderSizePixel = 0,
                Text = text or "Button",
                Font = Enum.Font.GothamSemibold,
                TextSize = isMobile and 12 or 14,
                TextColor3 = THEME.Text,
                AutoButtonColor = false,
                LayoutOrder = #tab.Elements + 1,
                ZIndex = 999998
            })
            button.Parent = TabPage
            
            local corner = new("UICorner")
            corner.CornerRadius = THEME.SmallCornerRadius
            corner.Parent = button

            -- Hover effects
            button.MouseEnter:Connect(function()
                TweenService:Create(button, THEME.FastTween, {
                    BackgroundColor3 = button.BackgroundColor3:lerp(Color3.new(1,1,1), 0.1)
                }):Play()
            end)
            
            button.MouseLeave:Connect(function()
                TweenService:Create(button, THEME.FastTween, {
                    BackgroundColor3 = Window._accent
                }):Play()
            end)

            if callback then
                button.MouseButton1Click:Connect(callback)
            end

            table.insert(tab.Elements, button)
            return button
        end

        function tab:CreateToggle(text, default, callback)
            local toggleFrame = new("Frame", {
                Name = "Toggle_" .. #tab.Elements,
                Size = UDim2.new(1, 0, 0, isMobile and 35 or 40),
                BackgroundColor3 = THEME.Card,
                BorderSizePixel = 0,
                LayoutOrder = #tab.Elements + 1,
                ZIndex = 999998
            })
            toggleFrame.Parent = TabPage
            
            local toggleCorner = new("UICorner")
            toggleCorner.CornerRadius = THEME.SmallCornerRadius
            toggleCorner.Parent = toggleFrame

            local toggleLabel = new("TextLabel", {
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -60, 1, 0),
                BackgroundTransparency = 1,
                Text = text or "Toggle",
                Font = Enum.Font.Gotham,
                TextSize = isMobile and 12 or 14,
                TextColor3 = THEME.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center,
                ZIndex = 999998
            })
            toggleLabel.Parent = toggleFrame

            local toggleButton = new("TextButton", {
                Position = UDim2.new(1, -40, 0.5, -10),
                Size = UDim2.new(0, 35, 0, 20),
                BackgroundColor3 = default and THEME.Success or THEME.TextMuted,
                BorderSizePixel = 0,
                Text = "",
                AutoButtonColor = false,
                ZIndex = 999998
            })
            toggleButton.Parent = toggleFrame
            
            local toggleButtonCorner = new("UICorner")
            toggleButtonCorner.CornerRadius = UDim.new(0.5, 0)
            toggleButtonCorner.Parent = toggleButton

            local toggleIndicator = new("Frame", {
                Position = default and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
                Size = UDim2.new(0, 16, 0, 16),
                BackgroundColor3 = THEME.Text,
                BorderSizePixel = 0,
                ZIndex = 999998
            })
            toggleIndicator.Parent = toggleButton
            
            local indicatorCorner = new("UICorner")
            indicatorCorner.CornerRadius = UDim.new(0.5, 0)
            indicatorCorner.Parent = toggleIndicator

            local toggled = default or false

            toggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                
                TweenService:Create(toggleButton, THEME.FastTween, {
                    BackgroundColor3 = toggled and THEME.Success or THEME.TextMuted
                }):Play()
                
                TweenService:Create(toggleIndicator, THEME.FastTween, {
                    Position = toggled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                }):Play()
                
                if callback then
                    callback(toggled)
                end
            end)

            table.insert(tab.Elements, toggleFrame)
            return toggleFrame, function() return toggled end
        end

        function tab:CreateTextBox(placeholder, callback)
            local textBox = new("TextBox", {
                Name = "TextBox_" .. #tab.Elements,
                Size = UDim2.new(1, 0, 0, isMobile and 35 or 40),
                BackgroundColor3 = THEME.Card,
                BorderSizePixel = 0,
                PlaceholderText = placeholder or "Enter text...",
                PlaceholderColor3 = THEME.TextMuted,
                Text = "",
                Font = Enum.Font.Gotham,
                TextSize = isMobile and 12 or 14,
                TextColor3 = THEME.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                ClearTextOnFocus = false,
                LayoutOrder = #tab.Elements + 1,
                ZIndex = 999998
            })
            textBox.Parent = TabPage
            
            local textBoxCorner = new("UICorner")
            textBoxCorner.CornerRadius = THEME.SmallCornerRadius
            textBoxCorner.Parent = textBox

            local textBoxPadding = new("UIPadding", {
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10)
            })
            textBoxPadding.Parent = textBox

            if callback then
                textBox.FocusLost:Connect(function(enterPressed)
                    callback(textBox.Text, enterPressed)
                end)
            end

            table.insert(tab.Elements, textBox)
            return textBox
        end

        function tab:CreateKeybind(text, defaultKey, callback)
            local keybindFrame = new("Frame", {
                Name = "Keybind_" .. #tab.Elements,
                Size = UDim2.new(1, 0, 0, isMobile and 35 or 40),
                BackgroundColor3 = THEME.Card,
                BorderSizePixel = 0,
                LayoutOrder = #tab.Elements + 1,
                ZIndex = 999998
            })
            keybindFrame.Parent = TabPage
            
            local keybindCorner = new("UICorner")
            keybindCorner.CornerRadius = THEME.SmallCornerRadius
            keybindCorner.Parent = keybindFrame

            local keybindLabel = new("TextLabel", {
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(0.6, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text or "Keybind",
                Font = Enum.Font.Gotham,
                TextSize = isMobile and 12 or 14,
                TextColor3 = THEME.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center,
                ZIndex = 999998
            })
            keybindLabel.Parent = keybindFrame

            local keyNames = {
                [Enum.KeyCode.Insert] = "Insert",
                [Enum.KeyCode.Home] = "Home",
                [Enum.KeyCode.End] = "End",
                [Enum.KeyCode.PageUp] = "PgUp",
                [Enum.KeyCode.PageDown] = "PgDn",
                [Enum.KeyCode.Delete] = "Delete",
                [Enum.KeyCode.F1] = "F1", [Enum.KeyCode.F2] = "F2", [Enum.KeyCode.F3] = "F3",
                [Enum.KeyCode.F4] = "F4", [Enum.KeyCode.F5] = "F5", [Enum.KeyCode.F6] = "F6",
                [Enum.KeyCode.F7] = "F7", [Enum.KeyCode.F8] = "F8", [Enum.KeyCode.F9] = "F9",
                [Enum.KeyCode.F10] = "F10", [Enum.KeyCode.F11] = "F11", [Enum.KeyCode.F12] = "F12",
                [Enum.KeyCode.LeftControl] = "LCtrl", [Enum.KeyCode.RightControl] = "RCtrl",
                [Enum.KeyCode.LeftShift] = "LShift", [Enum.KeyCode.RightShift] = "RShift"
            }

            local currentKey = defaultKey or Enum.KeyCode.Insert
            local keyButton = new("TextButton", {
                Position = UDim2.new(1, -100, 0.5, -12),
                Size = UDim2.new(0, 85, 0, 24),
                BackgroundColor3 = THEME.Panel,
                BorderSizePixel = 0,
                Text = keyNames[currentKey] or tostring(currentKey):gsub("Enum.KeyCode.", ""),
                Font = Enum.Font.Gotham,
                TextSize = isMobile and 10 or 12,
                TextColor3 = THEME.Text,
                AutoButtonColor = false,
                ZIndex = 999998
            })
            keyButton.Parent = keybindFrame
            
            local keyButtonCorner = new("UICorner")
            keyButtonCorner.CornerRadius = THEME.SmallCornerRadius
            keyButtonCorner.Parent = keyButton

            local isBinding = false

            keyButton.MouseButton1Click:Connect(function()
                if not isBinding then
                    isBinding = true
                    keyButton.Text = "..."
                    keyButton.TextColor3 = Window._accent
                    
                    local connection
                    connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                        if gameProcessed then return end
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            local newKey = input.KeyCode
                            local keyName = keyNames[newKey] or tostring(newKey):gsub("Enum.KeyCode.", "")
                            
                            currentKey = newKey
                            keyButton.Text = keyName
                            keyButton.TextColor3 = THEME.Text
                            
                            if callback then
                                callback(newKey)
                            end
                            
                            connection:Disconnect()
                            isBinding = false
                        end
                    end)
                end
            end)

            table.insert(tab.Elements, keybindFrame)
            return keybindFrame, function() return currentKey end
        end

        function tab:CreateSection(title)
            local section = new("Frame", {
                Name = "Section_" .. #tab.Elements,
                Size = UDim2.new(1, 0, 0, isMobile and 25 or 30),
                BackgroundTransparency = 1,
                LayoutOrder = #tab.Elements + 1,
                ZIndex = 999998
            })
            section.Parent = TabPage

            local sectionTitle = new("TextLabel", {
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = title or "Section",
                Font = Enum.Font.GothamBold,
                TextSize = isMobile and 14 or 16,
                TextColor3 = Window._accent,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Center,
                ZIndex = 999998
            })
            sectionTitle.Parent = section

            table.insert(tab.Elements, section)
            return section
        end

        -- Button hover effects
        TabButton.MouseEnter:Connect(function()
            if not tab.Active then
                TweenService:Create(TabButton, THEME.FastTween, {
                    BackgroundTransparency = 0.95,
                    BackgroundColor3 = THEME.TextMuted
                }):Play()
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if not tab.Active then
                TweenService:Create(TabButton, THEME.FastTween, {
                    BackgroundTransparency = 1
                }):Play()
            end
        end)

        TabButton.MouseButton1Click:Connect(function()
            tab:Show()
        end)

        -- Store references
        tab.Button = TabButton
        tab.Page = TabPage
        tab.Icon = TabIcon

        Window._tabs[#Window._tabs + 1] = tab
        return tab
    end

    -- Database helper function
    local function DB()
        return Window._scriptDatabase or SCRIPT_DATABASE
    end

    -- Script database
    local SCRIPT_DATABASE = {
        [301549746] = { -- Counter Blox
            gameName = "Counter Blox",
            scripts = {
                {title = "Lynk CB", description = "Advanced Counter Blox script", LoadString = 'loadstring(game:HttpGet("https://raw.githubusercontent.com/vvisuall/lynkcb/refs/heads/main/counterblox"))()', RequiresKey = true}
            }
        },
        [9791603388] = { -- Underground War 2.0
            gameName = "Underground War 2.0",
            scripts = {
                {title = "Silent Aim Fixed", description = "Silent aim for Underground War", LoadString = 'loadstring(game:HttpGet("https://raw.githubusercontent.com/vvisuall/WITHERCC/refs/heads/main/un"))()', RequiresKey = false}
            }
        },
        ["Universal"] = {
            gameName = "Universal Scripts",
            scripts = {
                {title = "Infinite Yield", description = "Admin commands for any game", LoadString = 'loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()', RequiresKey = false},
                {title = "Fly Script", description = "Universal fly with speed control", LoadString = 'loadstring(game:HttpGet("https://raw.githubusercontent.com/vvisuall/lynkUI/refs/heads/main/fly.lua"))()', RequiresKey = false},
                {title = "Noclip", description = "Walk through walls", LoadString = 'loadstring(game:HttpGet("https://raw.githubusercontent.com/vvisuall/lynkUI/refs/heads/main/noclip.lua"))()', RequiresKey = false},
                {title = "Universal Fly", description = "Universal fly script", LoadString = 'loadstring(game:HttpGet("https://raw.githubusercontent.com/vvisuall/WITHERCC/refs/heads/main/universal%20fly"))()', RequiresKey = false}
            }
        }
    }

    local function getCurrentPlaceId()
        return game.PlaceId
    end

    -- Script sidebar system
    function Window:CreateScriptSidebar()
        -- Sidebar container (initially hidden off-screen)
        local ScriptSidebar = new("Frame", {
            Name = "ScriptSidebar",
            Position = UDim2.new(1, 0, 0, 0),
            Size = isMobile and UDim2.new(1, 0, 1, 0) or UDim2.new(0, 350, 1, 0),
            BackgroundColor3 = THEME.Surface,
            BorderSizePixel = 0,
            ZIndex = 999999
        })
        ScriptSidebar.Parent = MainFrame
        
        local sidebarCorner = new("UICorner")
        sidebarCorner.CornerRadius = THEME.CornerRadius
        sidebarCorner.Parent = ScriptSidebar
        
        -- Sidebar gradient
        createGradient(ScriptSidebar, {
            ColorSequenceKeypoint.new(0, THEME.Surface),
            ColorSequenceKeypoint.new(1, THEME.Panel)
        }, 90)

        -- Return button
        local ReturnButton = new("TextButton", {
            Name = "ReturnButton",
            Position = UDim2.new(0, 10, 0, 10),
            Size = UDim2.new(0, 80, 0, 35),
            BackgroundColor3 = THEME.Primary,
            BorderSizePixel = 0,
            Text = "← Return",
            Font = Enum.Font.GothamBold,
            TextSize = isMobile and 12 or 14,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            ZIndex = 999999
        })
        ReturnButton.Parent = ScriptSidebar
        
        local returnCorner = new("UICorner")
        returnCorner.CornerRadius = UDim.new(0, 8)
        returnCorner.Parent = ReturnButton
        
        -- Content container
        local ContentContainer = new("ScrollingFrame", {
            Name = "ContentContainer",
            Position = UDim2.new(0, 20, 0, 60),
            Size = UDim2.new(1, -40, 1, -80),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 6,
            ScrollBarImageColor3 = THEME.Primary,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            ZIndex = 999999
        })
        ContentContainer.Parent = ScriptSidebar
        
        local contentLayout = new("UIListLayout")
        contentLayout.Parent = ContentContainer
        contentLayout.Padding = UDim.new(0, 15)
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        
        -- Store references
        Window._scriptSidebar = ScriptSidebar
        Window._sidebarContent = ContentContainer
        Window._sidebarReturnButton = ReturnButton
        
        -- Return button functionality
        ReturnButton.MouseButton1Click:Connect(function()
            Window:CloseScriptSidebar()
        end)
        
        return ScriptSidebar
    end

    function Window:OpenScriptSidebar(gameData, script)
        if not Window._scriptSidebar then
            Window:CreateScriptSidebar()
        end
        
        -- Make sidebar visible again when opening
        Window._scriptSidebar.Visible = true
        
        -- Clear existing content
        for _, child in pairs(Window._sidebarContent:GetChildren()) do
            if child:IsA("GuiObject") then
                child:Destroy()
            end
        end
        
        local placeId = gameData.placeId or "Universal"
        
        -- Game thumbnail (larger version)
        local ThumbnailContainer = new("Frame", {
            Name = "SidebarThumbnail",
            Size = UDim2.new(1, 0, 0, isMobile and 120 or 180),
            BackgroundColor3 = THEME.Card,
            BorderSizePixel = 0,
            LayoutOrder = 1,
            ZIndex = 999999
        })
        ThumbnailContainer.Parent = Window._sidebarContent
        
        local thumbCorner = new("UICorner")
        thumbCorner.CornerRadius = THEME.SmallCornerRadius
        thumbCorner.Parent = ThumbnailContainer
        
        local GameThumbnail = new("ImageLabel", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Image = placeId ~= "Universal" and string.format("https://www.roblox.com/asset-thumbnail/image?assetId=%d&width=768&height=432&format=png", placeId) or "rbxassetid://83202805728510",
            ScaleType = Enum.ScaleType.Crop,
            ZIndex = 999999
        })
        GameThumbnail.Parent = ThumbnailContainer
        
        local imageCorner = new("UICorner")
        imageCorner.CornerRadius = THEME.SmallCornerRadius
        imageCorner.Parent = GameThumbnail
        
        -- Universal placeholder
        if placeId == "Universal" then
            local UniversalIcon = new("TextLabel", {
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = "🌐",
                Font = Enum.Font.GothamBold,
                TextSize = isMobile and 32 or 64,
                TextColor3 = THEME.Primary,
                TextXAlignment = Enum.TextXAlignment.Center,
                TextYAlignment = Enum.TextYAlignment.Center,
                ZIndex = 999999
            })
            UniversalIcon.Parent = ThumbnailContainer
        end
        
        -- Key indicator (if needed) - FIXED
        if script.RequiresKey == true then
            local KeyIndicator = new("Frame", {
                Position = UDim2.new(1, -35, 0, 10),
                Size = UDim2.new(0, 25, 0, 25),
                BackgroundColor3 = Color3.fromRGB(255, 193, 7),
                BorderSizePixel = 0,
                ZIndex = 999999
            })
            KeyIndicator.Parent = ThumbnailContainer
            
            local keyCorner = new("UICorner")
            keyCorner.CornerRadius = UDim.new(0.5, 0)
            keyCorner.Parent = KeyIndicator
            
            local KeyIcon = new("TextLabel", {
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = "🔑",
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextColor3 = Color3.fromRGB(0, 0, 0),
                TextXAlignment = Enum.TextXAlignment.Center,
                TextYAlignment = Enum.TextYAlignment.Center,
                ZIndex = 999999
            })
            KeyIcon.Parent = KeyIndicator
        end
        
        -- Game name
        local GameNameLabel = new("TextLabel", {
            Name = "SidebarGameName",
            Size = UDim2.new(1, 0, 0, 20),
            BackgroundTransparency = 1,
            Text = gameData.gameName,
            Font = Enum.Font.Gotham,
            TextSize = isMobile and 12 or 14,
            TextColor3 = THEME.TextMuted,
            TextXAlignment = Enum.TextXAlignment.Left,
            LayoutOrder = 2,
            ZIndex = 999999
        })
        GameNameLabel.Parent = Window._sidebarContent
        
        -- Script name (large and bold)
        local ScriptNameLabel = new("TextLabel", {
            Name = "SidebarScriptName",
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundTransparency = 1,
            Text = script.Title or script.title or "Unknown Script",
            Font = Enum.Font.GothamBold,
            TextSize = isMobile and 16 or 20,
            TextColor3 = THEME.Text,
            TextXAlignment = Enum.TextXAlignment.Left,
            LayoutOrder = 3,
            ZIndex = 999999
        })
        ScriptNameLabel.Parent = Window._sidebarContent
        
        -- Description (if available)
        if script.Description or script.description then
            local DescriptionLabel = new("TextLabel", {
                Name = "SidebarDescription",
                Size = UDim2.new(1, 0, 0, 0),
                BackgroundTransparency = 1,
                Text = script.Description or script.description,
                Font = Enum.Font.Gotham,
                TextSize = isMobile and 11 or 13,
                TextColor3 = THEME.TextMuted,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
                TextWrapped = true,
                AutomaticSize = Enum.AutomaticSize.Y,
                LayoutOrder = 4,
                ZIndex = 999999
            })
            DescriptionLabel.Parent = Window._sidebarContent
        end
        
        -- Execute button (large and prominent)
        local ExecuteButton = new("TextButton", {
            Name = "SidebarExecuteButton",
            Size = UDim2.new(1, 0, 0, isMobile and 40 or 50),
            BackgroundColor3 = Color3.fromRGB(34, 197, 94),
            BorderSizePixel = 0,
            Text = "Execute Script",
            Font = Enum.Font.GothamBold,
            TextSize = isMobile and 14 or 16,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            AutoButtonColor = false,
            LayoutOrder = 5,
            ZIndex = 999999
        })
        ExecuteButton.Parent = Window._sidebarContent
        
        local executeCorner = new("UICorner")
        executeCorner.CornerRadius = THEME.SmallCornerRadius
        executeCorner.Parent = ExecuteButton
        
        -- Execute button functionality
        ExecuteButton.MouseButton1Click:Connect(function()
            ExecuteButton.Text = "Executing..."
            ExecuteButton.BackgroundColor3 = THEME.TextMuted
            
            spawn(function()
                local success, result = pcall(function()
                    if script.url then
                        loadstring(game:HttpGet(script.url))()
                    elseif script.LoadString then
                        loadstring(script.LoadString)()
                    else
                        error("No valid script entry found (url or LoadString missing)")
                    end
                end)
                
                wait(1)
                
                if success then
                    ExecuteButton.Text = "Executed Successfully ✓"
                    ExecuteButton.BackgroundColor3 = Color3.fromRGB(34, 197, 94)
                    showNotification("Script Execution", "Script executed successfully!", 3, "success")
                else
                    ExecuteButton.Text = "Execution Failed ✗"
                    ExecuteButton.BackgroundColor3 = Color3.fromRGB(239, 68, 68)
                    showNotification("Script Execution", "Script execution failed!", 3, "error")
                    warn("❌ Script execution failed:", result)
                end
                
                wait(3)
                ExecuteButton.Text = "Execute Script"
                ExecuteButton.BackgroundColor3 = Color3.fromRGB(34, 197, 94)
            end)
        end)
        
        -- Animate sidebar in
        TweenService:Create(Window._scriptSidebar, THEME.MediumTween, {
            Position = isMobile and UDim2.new(0, 0, 0, 0) or UDim2.new(1, -350, 0, 0)
        }):Play()
    end

    function Window:CloseScriptSidebar()
        if Window._scriptSidebar then
            local closeTween = TweenService:Create(Window._scriptSidebar, THEME.MediumTween, {
                Position = UDim2.new(1, 0, 0, 0)
            })
            closeTween:Play()
            
            closeTween.Completed:Connect(function()
                Window._scriptSidebar.Visible = false
                if Window._sidebarContent then
                    for _, child in pairs(Window._sidebarContent:GetChildren()) do
                        if child:IsA("GuiObject") then
                            child:Destroy()
                        end
                    end
                end
            end)
        end
    end

    local function createScriptCard(parent, gameData, script, position)
        local placeId = gameData.placeId or "Universal"
        
        -- Card container (responsive)
        local Card = new("Frame", {
            Name = "ScriptCard",
            Size = isMobile and UDim2.new(1, 0, 0, 120) or UDim2.new(0, 240, 0, 180),
            BackgroundColor3 = THEME.Card,
            BorderSizePixel = 0,
            ZIndex = 999998
        })
        Card.Parent = parent
        
        local cardCorner = new("UICorner")
        cardCorner.CornerRadius = THEME.SmallCornerRadius
        cardCorner.Parent = Card
        
        -- Card shadow/glow effect
        createGlow(Card, THEME.Primary, 0.8)
        
        -- Game thumbnail (responsive)
        local ThumbnailContainer = new("Frame", {
            Name = "ThumbnailContainer",
            Position = UDim2.new(0, 8, 0, 8),
            Size = isMobile and UDim2.new(0, 80, 1, -16) or UDim2.new(1, -16, 0, 120),
            BackgroundColor3 = THEME.Surface,
            BorderSizePixel = 0,
            ZIndex = 999998
        })
        ThumbnailContainer.Parent = Card
        
        local thumbCorner = new("UICorner")
        thumbCorner.CornerRadius = THEME.SmallCornerRadius
        thumbCorner.Parent = ThumbnailContainer
        
        -- Game thumbnail image
        local GameThumbnail = new("ImageLabel", {
            Name = "GameThumbnail",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Image = placeId ~= "Universal" and string.format("https://www.roblox.com/asset-thumbnail/image?assetId=%d&width=768&height=432&format=png", placeId) or "rbxassetid://83202805728510",
            ScaleType = Enum.ScaleType.Crop,
            ZIndex = 999998
        })
        GameThumbnail.Parent = ThumbnailContainer
        
        local imageCorner = new("UICorner")
        imageCorner.CornerRadius = THEME.SmallCornerRadius
        imageCorner.Parent = GameThumbnail
        
        -- Universal scripts placeholder
        if placeId == "Universal" then
            local UniversalIcon = new("TextLabel", {
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = "🌐",
                Font = Enum.Font.GothamBold,
                TextSize = isMobile and 24 or 48,
                TextColor3 = THEME.Primary,
                TextXAlignment = Enum.TextXAlignment.Center,
                TextYAlignment = Enum.TextYAlignment.Center,
                ZIndex = 999998
            })
            UniversalIcon.Parent = ThumbnailContainer
        end
        
        -- Key system indicator - FIXED
        if script.RequiresKey == true then
            local KeyIndicator = new("Frame", {
                Name = "KeyIndicator",
                Position = UDim2.new(1, -30, 0, 8),
                Size = UDim2.new(0, 22, 0, 22),
                BackgroundColor3 = Color3.fromRGB(255, 193, 7),
                BorderSizePixel = 0,
                ZIndex = 999998
            })
            KeyIndicator.Parent = ThumbnailContainer
            
            local keyCorner = new("UICorner")
            keyCorner.CornerRadius = UDim.new(0.5, 0)
            keyCorner.Parent = KeyIndicator
            
            local KeyIcon = new("TextLabel", {
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = "🔑",
                Font = Enum.Font.GothamBold,
                TextSize = 12,
                TextColor3 = Color3.fromRGB(0, 0, 0),
                TextXAlignment = Enum.TextXAlignment.Center,
                TextYAlignment = Enum.TextYAlignment.Center,
                ZIndex = 999998
            })
            KeyIcon.Parent = KeyIndicator
        end
        
        -- Game name (responsive)
        local GameName = new("TextLabel", {
            Name = "GameName",
            Position = isMobile and UDim2.new(0, 96, 0, 8) or UDim2.new(0, 12, 0, 135),
            Size = isMobile and UDim2.new(1, -104, 0, 16) or UDim2.new(1, -24, 0, 16),
            BackgroundTransparency = 1,
            Text = gameData.gameName,
            Font = Enum.Font.Gotham,
            TextSize = isMobile and 10 or 12,
            TextColor3 = THEME.TextMuted,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextTruncate = Enum.TextTruncate.AtEnd,
            ZIndex = 999998
        })
        GameName.Parent = Card
        
        -- Script name (responsive)
        local ScriptName = new("TextLabel", {
            Name = "ScriptName",
            Position = isMobile and UDim2.new(0, 96, 0, 28) or UDim2.new(0, 12, 0, 152),
            Size = isMobile and UDim2.new(1, -104, 0, 20) or UDim2.new(1, -24, 0, 20),
            BackgroundTransparency = 1,
            Text = script.Title or script.title,
            Font = Enum.Font.GothamBold,
            TextSize = isMobile and 12 or 16,
            TextColor3 = THEME.Text,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextTruncate = Enum.TextTruncate.AtEnd,
            ZIndex = 999998
        })
        ScriptName.Parent = Card
        
        -- Click handler to open sidebar
        local ClickButton = new("TextButton", {
            Name = "ClickButton",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Text = "",
            ZIndex = 999999
        })
        ClickButton.Parent = Card
        
        -- Card click functionality to open sidebar
        ClickButton.MouseButton1Click:Connect(function()
            Window:OpenScriptSidebar(gameData, script)
        end)
        
        -- Hover effects
        ClickButton.MouseEnter:Connect(function()
            TweenService:Create(Card, THEME.FastTween, {
                BackgroundColor3 = THEME.Surface
            }):Play()
        end)
        
        ClickButton.MouseLeave:Connect(function()
            TweenService:Create(Card, THEME.FastTween, {
                BackgroundColor3 = THEME.Card
            }):Play()
        end)
        
        return Card
    end

    -- Populate home tab with script cards
    local function populateHomeTab(homeTab)
        -- Clear existing content
        for _, child in pairs(homeTab:GetChildren()) do
            if child:IsA("GuiObject") then
                child:Destroy()
            end
        end
        
        -- Create search bar
        local searchFrame = new("Frame", {
            Name = "SearchFrame",
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, 0, 0, isMobile and 35 or 40),
            BackgroundColor3 = Color3.fromRGB(40, 40, 40),
            BorderSizePixel = 0,
            ZIndex = 999998
        })
        searchFrame.Parent = homeTab
        
        local searchCorner = new("UICorner")
        searchCorner.CornerRadius = UDim.new(0, 8)
        searchCorner.Parent = searchFrame
        
        local searchBox = new("TextBox", {
            Name = "SearchBox",
            Position = UDim2.new(0, 15, 0, 0),
            Size = UDim2.new(1, -30, 1, 0),
            BackgroundTransparency = 1,
            Text = "",
            PlaceholderText = "🔍 Search scripts...",
            Font = Enum.Font.Gotham,
            TextSize = isMobile and 12 or 14,
            TextColor3 = THEME.Text,
            PlaceholderColor3 = THEME.TextMuted,
            TextXAlignment = Enum.TextXAlignment.Left,
            ClearTextOnFocus = false,
            ZIndex = 999998
        })
        searchBox.Parent = searchFrame
        
        -- Create scroll frame for script cards
        local ScrollFrame = new("ScrollingFrame", {
            Name = "ScriptScrollFrame",
            Position = UDim2.new(0, 0, 0, isMobile and 45 or 50),
            Size = UDim2.new(1, 0, 1, isMobile and -45 or -50),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 6,
            ScrollBarImageColor3 = THEME.Primary,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            ZIndex = 999998
        })
        ScrollFrame.Parent = homeTab
        
        -- Add search functionality
        searchBox.Changed:Connect(function(property)
            if property == "Text" then
                local searchText = searchBox.Text
                
                for _, card in pairs(ScrollFrame:GetChildren()) do
                    if card:IsA("Frame") and card.Name ~= "UIGridLayout" and card.Name ~= "UIPadding" then
                        local scriptNameLabel = card:FindFirstChild("ScriptName")
                        local gameNameLabel = card:FindFirstChild("GameName")
                        local visible = false
                        
                        if searchText == "" then
                            visible = true
                        else
                            local searchLower = searchText:lower()
                            
                            if scriptNameLabel and scriptNameLabel.Text:lower():find(searchLower) then
                                visible = true
                            end
                            
                            if gameNameLabel and gameNameLabel.Text:lower():find(searchLower) then
                                visible = true
                            end
                            
                            local keywords = card:GetAttribute("Keywords") or ""
                            if keywords:lower():find(searchLower) then
                                visible = true
                            end
                            
                            local description = card:GetAttribute("Description") or ""
                            if description:lower():find(searchLower) then
                                visible = true
                            end
                        end
                        
                        card.Visible = visible
                    end
                end
            end
        end)
        
        -- Layout for script cards (responsive)
        if isMobile then
            local MobileLayout = new("UIListLayout", {
                Padding = UDim.new(0, 10),
                SortOrder = Enum.SortOrder.LayoutOrder
            })
            MobileLayout.Parent = ScrollFrame
        else
            local actualWidth = ScrollFrame.AbsoluteSize.X > 0 and ScrollFrame.AbsoluteSize.X or 580
            local totalPadding = 30
            local cellWidth = math.floor((actualWidth - totalPadding) / 2)
            cellWidth = math.max(cellWidth, 220)
            
            local GridLayout = new("UIGridLayout", {
                CellSize = UDim2.new(0, cellWidth, 0, 180),
                CellPadding = UDim2.new(0, 10, 0, 15),
                HorizontalAlignment = Enum.HorizontalAlignment.Left,
                VerticalAlignment = Enum.VerticalAlignment.Top,
                SortOrder = Enum.SortOrder.LayoutOrder,
                FillDirection = Enum.FillDirection.Horizontal,
                StartCorner = Enum.StartCorner.TopLeft
            })
            GridLayout.Parent = ScrollFrame
        end
        
        -- Add padding to scroll frame
        local Padding = new("UIPadding", {
            PaddingTop = UDim.new(0, 15),
            PaddingBottom = UDim.new(0, 15),
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10)
        })
        Padding.Parent = ScrollFrame

        -- Get current game's scripts
        local currentPlaceId = getCurrentPlaceId()
        local currentGameData = DB()[currentPlaceId]
        
        local cardIndex = 0
        
        -- Add current game's scripts first (if available)
        if currentGameData then
            for _, script in pairs(currentGameData.scripts) do
                local card = createScriptCard(ScrollFrame, {
                    placeId = currentPlaceId,
                    gameName = currentGameData.gameName
                }, script)
                card.LayoutOrder = cardIndex
                card:SetAttribute("Keywords", script.keywords or "")
                card:SetAttribute("Description", script.description or "")
                cardIndex = cardIndex + 1
            end
        end
        
        -- Add universal scripts
        local universalData = DB()["Universal"]
        if universalData then
            for _, script in pairs(universalData.scripts) do
                local card = createScriptCard(ScrollFrame, {
                    placeId = "Universal",
                    gameName = universalData.gameName
                }, script)
                card.LayoutOrder = cardIndex
                card:SetAttribute("Keywords", script.keywords or "fly noclip speed universal movement")
                card:SetAttribute("Description", script.description or "")
                cardIndex = cardIndex + 1
            end
        end
        
        -- Add other games' scripts
        for placeId, gameData in pairs(DB()) do
            if placeId ~= currentPlaceId and placeId ~= "Universal" then
                for _, script in pairs(gameData.scripts) do
                    local card = createScriptCard(ScrollFrame, {
                        placeId = placeId,
                        gameName = gameData.gameName
                    }, script)
                    card.LayoutOrder = cardIndex
                    card:SetAttribute("Keywords", script.keywords or "")
                    card:SetAttribute("Description", script.description or "")
                    cardIndex = cardIndex + 1
                end
            end
        end
    end

    -- LoadScriptCards function with proper tab content
    function Window:LoadScriptCards()
        -- Only create tabs if none exist yet
        if #Window._tabs == 0 then
            -- Create Home tab with script cards
            local homeTab = Window:CreateTab("Home", "rbxassetid://10734950309", 1)
            populateHomeTab(homeTab.Page)
            
            -- Create Updates tab with content
            local updatesTab = Window:CreateTab("Updates", "rbxassetid://7733674079", 2)
            updatesTab:CreateSection("📋 Recent Updates")
            updatesTab:CreateLabel("🔄 Version 2.2.0 - Latest:")
            updatesTab:CreateLabel("• Fixed tab content visibility issues")
            updatesTab:CreateLabel("• Added proper UI library functions")
            updatesTab:CreateLabel("• Implemented mobile support")
            updatesTab:CreateLabel("• Enhanced key system with CoreGui override")
            updatesTab:CreateLabel("• Added notification system with fallbacks")
            updatesTab:CreateLabel("• Fixed minimize/maximize functionality")
            updatesTab:CreateLabel("• Improved RequiresKey detection")
            updatesTab:CreateLabel("")
            updatesTab:CreateLabel("🔄 Version 2.1.0:")
            updatesTab:CreateLabel("• Improved UI performance")
            updatesTab:CreateLabel("• Added new script categories")
            updatesTab:CreateLabel("• Enhanced search functionality")
            
            -- Create Credits tab with content
            local creditsTab = Window:CreateTab("Credits", "rbxassetid://7733955511", 3)
            creditsTab:CreateSection("🚀 LYNK Script Hub v2.2")
            creditsTab:CreateLabel("")
            creditsTab:CreateSection("👨‍💻 Development Team:")
            creditsTab:CreateLabel("• @x_vvw - Lead Developer")
            creditsTab:CreateLabel("• Script Hub Community")
            creditsTab:CreateLabel("")
            creditsTab:CreateSection("🎨 Features:")
            creditsTab:CreateLabel("• Modern GitHub integration")
            creditsTab:CreateLabel("• Auto game detection")
            creditsTab:CreateLabel("• Professional card layout")
            creditsTab:CreateLabel("• Smart search system")
            creditsTab:CreateLabel("• Mobile responsive design")
            creditsTab:CreateLabel("• Advanced notification system")
            creditsTab:CreateLabel("• Minimize/maximize functionality")
            creditsTab:CreateLabel("")
            creditsTab:CreateLabel("https://discord.gg/AzMbjqD7T3")

            -- Create Settings tab with keybind selector and other options
            local settingsTab = Window:CreateTab("Settings", "rbxassetid://10734950020", 4)
            
            settingsTab:CreateSection("⌨️ Keybind Selector")
            local keybindFrame, getKeybind = settingsTab:CreateKeybind("UI Toggle Key", Window._uiKey, function(newKey)
                Window._uiKey = newKey
                showNotification("Settings", "UI toggle key updated!", 3, "success")
            end)
            
            settingsTab:CreateSection("🔄 Database Management")
            settingsTab:CreateButton("Refresh Database", function()
                showNotification("Database", "Database refreshed successfully!", 3, "success")
            end)
            
            settingsTab:CreateSection("🎨 Appearance")
            settingsTab:CreateButton("Theme Settings", function()
                showNotification("Theme", "Theme customization coming soon!", 3, "info")
            end)
            
            local notificationToggle, getNotificationState = settingsTab:CreateToggle("Enable Notifications", true, function(enabled)
                showNotification("Settings", enabled and "Notifications enabled" or "Notifications disabled", 3, "info")
            end)

            -- Ensure home tab shows first
            spawn(function()
                wait(0.1)
                homeTab:Show()
            end)
        end
    end

    -- Start hidden by default; show key screen or hub based on lock state
    setVisibility(false)

    if Window._locked then
        -- Show key system; main hub stays hidden until unlocked
        createKeySystem(Window)
    else
        -- No key system; show hub immediately
        Window:Show()
    end

    -- Always apply metatable regardless of key system state
    setmetatable(Window, {__index = Lynk})

    return Window
end

return Lynk
