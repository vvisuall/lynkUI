-- MyUI (v1.0) - A clean, advanced Roblox UI library
-- Save this as source.lua and publish on GitHub.
-- Supports: CreateWindow, CreateTab, CreateSection, Button, Toggle, Slider, Dropdown,
-- Keybind, Input, Label, Paragraph, ColorPicker, Notify, Destroy, Config save/load,
-- ScriptHub with SearchBar, SecureMode, KeySystem stub.

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local MyUI = {}
MyUI.__index = MyUI

-- Utilities
local function new(Name, Class)
    local obj = Instance.new(Class)
    obj.Name = Name
    return obj
end

local function isWritefileAvailable()
    return type(writefile) == "function" and type(readfile) == "function"
end

local function safeWrite(path, data)
    if isWritefileAvailable() then
        pcall(writefile, path, data)
        return true
    end
    return false
end

local function safeRead(path)
    if isWritefileAvailable() then
        local ok, data = pcall(readfile, path)
        if ok then return data end
    end
    return nil
end

-- Default style
local STYLE = {
    WindowSize = UDim2.new(0, 700, 0, 420),
    Background = Color3.fromRGB(28, 28, 30),
    Accent = Color3.fromRGB(34, 166, 179),
    Text = Color3.fromRGB(235, 235, 235),
    SubText = Color3.fromRGB(170, 170, 170),
    CornerRadius = UDim.new(0, 10),
    TweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
}

-- Core Window creation
function MyUI.CreateWindow(opts)
    opts = opts or {}
    local Window = {}
    Window._tabs = {}
    Window._flags = {}
    Window._config = {
        Enabled = opts.ConfigurationSaving and opts.ConfigurationSaving.Enabled or false,
        FileName = (opts.ConfigurationSaving and opts.ConfigurationSaving.FileName) or "MyUIConfig",
        FolderName = (opts.ConfigurationSaving and opts.ConfigurationSaving.FolderName) or nil
    }
    Window._keysystem = opts.KeySystem or false
    Window._keysettings = opts.KeySettings or {}
    Window._secure = getgenv().SecureMode == true

    -- Parent ScreenGui
    local player = Players.LocalPlayer
    if not player then
        error("MyUI: LocalPlayer not found (must run as local script / exploit local).")
    end
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = opts.Name or "MyUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Parent = player:WaitForChild("PlayerGui")
    Window._screen = ScreenGui

    -- Root frame
    local Root = new("Root", "Frame")
    Root.Size = STYLE.WindowSize
    Root.Position = UDim2.new(0.5, -(STYLE.WindowSize.X.Offset/2), 0.5, -(STYLE.WindowSize.Y.Offset/2))
    Root.AnchorPoint = Vector2.new(0.5, 0.5)
    Root.BackgroundColor3 = STYLE.Background
    Root.BorderSizePixel = 0
    Root.Parent = ScreenGui
    Window._root = Root

    -- Rounded corners
    local UICorner = new("UICorner", "UICorner")
    UICorner.CornerRadius = STYLE.CornerRadius
    UICorner.Parent = Root

    -- Top bar (title + close)
    local Topbar = new("Topbar", "Frame")
    Topbar.Size = UDim2.new(1, 0, 0, 48)
    Topbar.BackgroundTransparency = 1
    Topbar.Parent = Root

    local Title = new("Title", "TextLabel")
    Title.Size = UDim2.new(1, -96, 1, 0)
    Title.Position = UDim2.new(0, 16, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = opts.LoadingTitle or opts.Name or "MyUI Window"
    Title.Font = Enum.Font.GothamSemibold
    Title.TextSize = 18
    Title.TextColor3 = STYLE.Text
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Topbar

    local SubTitle = new("SubTitle", "TextLabel")
    SubTitle.Size = UDim2.new(1, -96, 1, 0)
    SubTitle.Position = UDim2.new(0, 16, 0, 20)
    SubTitle.BackgroundTransparency = 1
    SubTitle.Text = opts.LoadingSubtitle or ""
    SubTitle.Font = Enum.Font.Gotham
    SubTitle.TextSize = 12
    SubTitle.TextColor3 = STYLE.SubText
    SubTitle.TextXAlignment = Enum.TextXAlignment.Left
    SubTitle.Parent = Topbar

    local CloseBtn = new("Close", "TextButton")
    CloseBtn.Size = UDim2.new(0, 68, 0, 28)
    CloseBtn.Position = UDim2.new(1, -76, 0.5, -14)
    CloseBtn.AnchorPoint = Vector2.new(0, 0.5)
    CloseBtn.BackgroundColor3 = STYLE.Accent
    CloseBtn.Text = "Close"
    CloseBtn.Font = Enum.Font.GothamBold
    CloseBtn.TextSize = 13
    CloseBtn.TextColor3 = Color3.new(1,1,1)
    CloseBtn.AutoButtonColor = true
    CloseBtn.Parent = Topbar
    local cbcorner = new("cbcorner","UICorner"); cbcorner.CornerRadius = UDim.new(0,8); cbcorner.Parent = CloseBtn

    CloseBtn.MouseButton1Click:Connect(function()
        Window:Destroy()
    end)

    -- Left side: Tabs list
    local Left = new("Left", "Frame")
    Left.Size = UDim2.new(0, 180, 1, -64)
    Left.Position = UDim2.new(0, 0, 0, 64)
    Left.BackgroundTransparency = 1
    Left.Parent = Root

    local TabsList = new("TabsList", "ScrollingFrame")
    TabsList.Size = UDim2.new(1, 0, 1, -16)
    TabsList.Position = UDim2.new(0, 0, 0, 8)
    TabsList.BackgroundTransparency = 1
    TabsList.ScrollBarThickness = 6
    TabsList.Parent = Left
    local TabsLayout = new("TabsLayout", "UIListLayout"); TabsLayout.Parent = TabsList; TabsLayout.SortOrder = Enum.SortOrder.LayoutOrder; TabsLayout.Padding = UDim.new(0,8)

    -- Right side: Content area
    local Content = new("Content", "Frame")
    Content.Size = UDim2.new(1, -200, 1, -64)
    Content.Position = UDim2.new(0, 200, 0, 64)
    Content.BackgroundTransparency = 1
    Content.Parent = Root
    Window._content = Content

    -- Search bar (top of content) - for script hub and general search
    local SearchBarParent = new("SearchParent", "Frame")
    SearchBarParent.Size = UDim2.new(1, -24, 0, 36)
    SearchBarParent.Position = UDim2.new(0, 12, 0, 8)
    SearchBarParent.BackgroundTransparency = 1
    SearchBarParent.Parent = Content

    local SearchBox = new("SearchBox", "TextBox")
    SearchBox.Size = UDim2.new(1, 0, 1, 0)
    SearchBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    SearchBox.PlaceholderText = "Search scripts, options..."
    SearchBox.Text = ""
    SearchBox.ClearTextOnFocus = false
    SearchBox.TextColor3 = STYLE.Text
    SearchBox.Font = Enum.Font.Gotham
    SearchBox.TextSize = 14
    SearchBox.Parent = SearchBarParent
    local sCorner = new("sCorner","UICorner"); sCorner.CornerRadius = UDim.new(0,8); sCorner.Parent = SearchBox
    local sPadding = new("sPadding","UIPadding"); sPadding.PaddingLeft = UDim.new(0,10); sPadding.Parent = SearchBox

    -- Internal helpers for tabs/sections/elements
    local function createTabInstance(title, icon)
        local tbtn = new(title, "TextButton")
        tbtn.Size = UDim2.new(1, -16, 0, 40)
        tbtn.BackgroundTransparency = 0
        tbtn.BackgroundColor3 = Color3.fromRGB(37,37,37)
        tbtn.Text = title
        tbtn.TextColor3 = STYLE.Text
        tbtn.Font = Enum.Font.GothamBold
        tbtn.TextSize = 14
        tbtn.AutoButtonColor = false
        local tcorner = new("tcorner","UICorner"); tcorner.CornerRadius = UDim.new(0,8); tcorner.Parent = tbtn
        return tbtn
    end

    -- Tab creation API
    function Window:CreateTab(name, imageId)
        local tab = {}
        tab.Name = name
        tab._sections = {}

        -- List button
        local btn = createTabInstance(name)
        btn.Parent = TabsList

        -- Content page
        local page = new(name .. "Page", "Frame")
        page.Size = UDim2.new(1, 0, 1, -56)
        page.Position = UDim2.new(0, 0, 0, 48)
        page.BackgroundTransparency = 1
        page.Visible = false
        page.Parent = Content

        local scroll = new("Scroll", "ScrollingFrame")
        scroll.Size = UDim2.new(1, -24, 1, -64)
        scroll.Position = UDim2.new(0, 12, 0, 56)
        scroll.BackgroundTransparency = 1
        scroll.ScrollBarThickness = 6
        scroll.Parent = page

        local listLayout = new("ListLayout", "UIListLayout")
        listLayout.Parent = scroll
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder
        listLayout.Padding = UDim.new(0,10)

        local function show()
            for _, t in pairs(self._tabs) do
                if t.page then t.page.Visible = false end
            end
            page.Visible = true
            -- highlight
            for _, obj in pairs(TabsList:GetChildren()) do
                if obj:IsA("TextButton") then
                    obj.BackgroundColor3 = Color3.fromRGB(37,37,37)
                end
            end
            btn.BackgroundColor3 = STYLE.Accent
        end

        btn.MouseButton1Click:Connect(show)

        tab._page = page
        tab._scroll = scroll
        tab._listLayout = listLayout

        function tab:CreateSection(title)
            local sec = {}
            sec._frame = new(title .. "Section", "Frame")
            sec._frame.Size = UDim2.new(1, 0, 0, 36)
            sec._frame.BackgroundTransparency = 1
            sec._frame.Parent = scroll

            local header = new("Header", "TextLabel")
            header.Size = UDim2.new(1, 0, 0, 28)
            header.BackgroundTransparency = 1
            header.Font = Enum.Font.GothamSemiBold
            header.TextSize = 14
            header.TextColor3 = STYLE.Text
            header.Text = title
            header.TextXAlignment = Enum.TextXAlignment.Left
            header.Parent = sec._frame

            local content = new("Content", "Frame")
            content.Size = UDim2.new(1, 0, 0, 0)
            content.Position = UDim2.new(0, 0, 0, 34)
            content.BackgroundTransparency = 1
            content.Parent = sec._frame

            local contentLayout = new("ContentLayout","UIListLayout"); contentLayout.Parent = content; contentLayout.SortOrder = Enum.SortOrder.LayoutOrder; contentLayout.Padding = UDim.new(0,6)

            function sec:Add(child)
                child.Parent = content
                -- update container size
                wait() -- allow layout
                local total = contentLayout.AbsoluteContentBounds.Y
                content.Size = UDim2.new(1,0,0,total + 8)
                sec._frame.Size = UDim2.new(1,0,0,34 + content.Size.Y.Offset)
            end

            function sec:Set(newTitle)
                header.Text = newTitle
            end

            function sec:Destroy()
                sec._frame:Destroy()
            end

            tab._sections[#tab._sections+1] = sec
            return sec
        end

        -- Element creators (Button, Toggle, Slider, Dropdown, Input, Keybind, Label, Paragraph, ColorPicker, Notify)
        function tab:CreateButton(opts)
            opts = opts or {}
            local btnf = new("Button", "Frame")
            btnf.Size = UDim2.new(1,0,0,36)
            btnf.BackgroundTransparency = 1

            local b = new("ButtonBtn","TextButton")
            b.Size = UDim2.new(1,0,0,36)
            b.BackgroundColor3 = Color3.fromRGB(48,48,48)
            b.Font = Enum.Font.GothamBold
            b.TextSize = 14
            b.TextColor3 = STYLE.Text
            b.Text = opts.Name or "Button"
            b.AutoButtonColor = true
            b.Parent = btnf
            local bc = new("bc","UICorner"); bc.CornerRadius = UDim.new(0,8); bc.Parent = b

            if opts.Info then
                local info = new("Info","TextLabel")
                info.Size = UDim2.new(1,0,0,18)
                info.Position = UDim2.new(0,0,1,2)
                info.BackgroundTransparency = 1
                info.Font = Enum.Font.Gotham
                info.TextSize = 12
                info.TextColor3 = STYLE.SubText
                info.Text = opts.Info
                info.Parent = btnf
                btnf.Size = UDim2.new(1,0,0,56)
            end

            b.MouseButton1Click:Connect(function()
                local ok, err = pcall(function()
                    if opts.Callback then opts.Callback() end
                end)
                if not ok then warn("Button callback error:", err) end
            end)

            tab._scroll.CanvasSize = UDim2.new(0,0,0, tab._scroll.CanvasSize.Y.Offset + btnf.Size.Y.Offset)
            btnf.Parent = tab._scroll
            return {
                Set = function(newText)
                    if newText then b.Text = newText end
                end,
                Destroy = function() btnf:Destroy() end,
                ParentFrame = btnf
            }
        end

        function tab:CreateToggle(opts)
            opts = opts or {}
            local f = new("ToggleFrame","Frame")
            f.Size = UDim2.new(1,0,0,36)
            f.BackgroundTransparency = 1

            local name = new("Name","TextLabel")
            name.Size = UDim2.new(0.7,0,1,0)
            name.BackgroundTransparency = 1
            name.Font = Enum.Font.Gotham
            name.TextSize = 14
            name.TextColor3 = STYLE.Text
            name.Text = opts.Name or "Toggle"
            name.TextXAlignment = Enum.TextXAlignment.Left
            name.Parent = f

            local toggle = new("Toggle","TextButton")
            toggle.Size = UDim2.new(0,56,0,24)
            toggle.Position = UDim2.new(1,-64,0.5,-12)
            toggle.AnchorPoint = Vector2.new(0,0)
            toggle.BackgroundColor3 = Color3.fromRGB(60,60,60)
            toggle.Font = Enum.Font.GothamBold
            toggle.TextSize = 12
            toggle.Text = opts.CurrentValue and "ON" or "OFF"
            toggle.Parent = f
            local tcorner = new("tcorner","UICorner"); tcorner.CornerRadius = UDim.new(0,6); tcorner.Parent = toggle

            local current = opts.CurrentValue == true

            toggle.MouseButton1Click:Connect(function()
                current = not current
                toggle.Text = current and "ON" or "OFF"
                if opts.Callback then
                    pcall(opts.Callback, current)
                end
                if opts.Flag then Window._flags[opts.Flag] = current end
            end)

            tab._scroll.CanvasSize = UDim2.new(0,0,0, tab._scroll.CanvasSize.Y.Offset + f.Size.Y.Offset)
            f.Parent = tab._scroll

            return {
                Set = function(val)
                    current = not not val
                    toggle.Text = current and "ON" or "OFF"
                end,
                CurrentValue = current,
                Destroy = function() f:Destroy() end,
                ParentFrame = f
            }
        end

        function tab:CreateSlider(opts)
            opts = opts or {}
            local frame = new("SliderFrame","Frame")
            frame.Size = UDim2.new(1,0,0,52)
            frame.BackgroundTransparency = 1

            local title = new("Title","TextLabel")
            title.Size = UDim2.new(1,0,0,18)
            title.BackgroundTransparency = 1
            title.Font = Enum.Font.Gotham
            title.TextSize = 13
            title.TextColor3 = STYLE.Text
            title.Text = opts.Name or "Slider"
            title.TextXAlignment = Enum.TextXAlignment.Left
            title.Parent = frame

            local sliderBG = new("SliderBG","Frame")
            sliderBG.Size = UDim2.new(1,0,0,14)
            sliderBG.Position = UDim2.new(0,0,0,22)
            sliderBG.BackgroundColor3 = Color3.fromRGB(55,55,55)
            sliderBG.Parent = frame
            local bgc = new("bgc","UICorner"); bgc.CornerRadius = UDim.new(0,6); bgc.Parent = sliderBG

            local fill = new("Fill","Frame")
            fill.Size = UDim2.new(0, 0, 1, 0)
            fill.BackgroundColor3 = STYLE.Accent
            fill.Parent = sliderBG
            local fc = new("fc","UICorner"); fc.CornerRadius = UDim.new(0,6); fc.Parent = fill

            local minv = (opts.Range and opts.Range[1]) or 0
            local maxv = (opts.Range and opts.Range[2]) or 100
            local cur = opts.CurrentValue or minv

            local function setValue(v)
                v = math.clamp(v, minv, maxv)
                local proportion = (v - minv) / (maxv - minv)
                fill:TweenSize(UDim2.new(proportion, 0, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.15, true)
                cur = v
                if opts.Callback then pcall(opts.Callback, v) end
                if opts.Flag then Window._flags[opts.Flag] = v end
            end

            sliderBG.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    local function move(input2)
                        local pos = input2.Position.X - sliderBG.AbsolutePosition.X
                        local p = pos / sliderBG.AbsoluteSize.X
                        local v = math.floor((minv + (maxv - minv) * p) / (opts.Increment or 1)) * (opts.Increment or 1)
                        setValue(v)
                    end
                    move(input)
                    local conn
                    conn = UserInputService.InputChanged:Connect(function(i)
                        if i.UserInputType == Enum.UserInputType.MouseMovement then move(i) end
                    end)
                    local upConn
                    upConn = UserInputService.InputEnded:Connect(function(i)
                        if i.UserInputType == Enum.UserInputType.MouseButton1 then
                            if conn then conn:Disconnect() end
                            if upConn then upConn:Disconnect() end
                        end
                    end)
                end
            end)

            setValue(cur)
            tab._scroll.CanvasSize = UDim2.new(0,0,0, tab._scroll.CanvasSize.Y.Offset + frame.Size.Y.Offset)
            frame.Parent = tab._scroll
            return {
                Set = setValue,
                CurrentValue = cur,
                Destroy = function() frame:Destroy() end,
                ParentFrame = frame
            }
        end

        function tab:CreateLabel(text, SectionParent)
            local frame = new("LabelFrame","Frame")
            frame.Size = UDim2.new(1,0,0,24)
            frame.BackgroundTransparency = 1

            local label = new("Label","TextLabel")
            label.Size = UDim2.new(1,0,1,0)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 13
            label.TextColor3 = STYLE.Text
            label.Text = text or ""
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = frame

            tab._scroll.CanvasSize = UDim2.new(0,0,0, tab._scroll.CanvasSize.Y.Offset + frame.Size.Y.Offset)
            frame.Parent = tab._scroll

            return {
                Set = function(newText) label.Text = newText end,
                Destroy = function() frame:Destroy() end,
                ParentFrame = frame
            }
        end

        function tab:CreateParagraph(opts)
            opts = opts or {}
            local title = opts.Title or ""
            local content = opts.Content or ""

            local frame = new("Paragraph","Frame")
            frame.Size = UDim2.new(1,0,0,62)
            frame.BackgroundTransparency = 1

            local t = new("T","TextLabel"); t.Size = UDim2.new(1,0,0,18); t.BackgroundTransparency = 1; t.Text = title; t.Font = Enum.Font.GothamBold; t.TextSize=14; t.TextXAlignment = Enum.TextXAlignment.Left; t.TextColor3 = STYLE.Text; t.Parent = frame
            local c = new("C","TextLabel"); c.Size = UDim2.new(1,0,0,36); c.Position = UDim2.new(0,0,0,20); c.BackgroundTransparency = 1; c.Text = content; c.Font = Enum.Font.Gotham; c.TextSize=13; c.TextWrapped=true; c.TextXAlignment = Enum.TextXAlignment.Left; c.TextColor3 = STYLE.SubText; c.Parent = frame

            tab._scroll.CanvasSize = UDim2.new(0,0,0, tab._scroll.CanvasSize.Y.Offset + frame.Size.Y.Offset)
            frame.Parent = tab._scroll

            return {
                Set = function(val)
                    if type(val) == "table" then
                        t.Text = val.Title or t.Text
                        c.Text = val.Content or c.Text
                    end
                end,
                Destroy = function() frame:Destroy() end,
                ParentFrame = frame
            }
        end

        function tab:CreateInput(opts)
            opts = opts or {}
            local frame = new("InputFrame","Frame")
            frame.Size = UDim2.new(1,0,0,36)
            frame.BackgroundTransparency = 1

            local label = new("Label","TextLabel")
            label.Size = UDim2.new(0.4,0,1,0)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextColor3 = STYLE.Text
            label.Text = opts.Name or "Input"
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = frame

            local box = new("Box","TextBox")
            box.Size = UDim2.new(0.6, -8, 1, 0)
            box.Position = UDim2.new(0.4, 8, 0, 0)
            box.BackgroundColor3 = Color3.fromRGB(45,45,45)
            box.Text = ""
            box.PlaceholderText = opts.PlaceholderText or ""
            box.ClearTextOnFocus = false
            box.Font = Enum.Font.Gotham
            box.TextSize = 13
            box.TextColor3 = STYLE.Text
            box.Parent = frame
            local bcorner = new("bcorner","UICorner"); bcorner.CornerRadius = UDim.new(0,6); bcorner.Parent = box

            if opts.NumbersOnly then
                box:GetPropertyChangedSignal("Text"):Connect(function()
                    box.Text = box.Text:gsub("[^%d]", "")
                end)
            end

            local function doCallback(entered)
                if entered or not opts.OnEnter then
                    if opts.Callback then pcall(opts.Callback, box.Text) end
                end
            end

            box.FocusLost:Connect(function(enter)
                doCallback(enter)
                if opts.RemoveTextAfterFocusLost then box.Text = "" end
            end)

            tab._scroll.CanvasSize = UDim2.new(0,0,0, tab._scroll.CanvasSize.Y.Offset + frame.Size.Y.Offset)
            frame.Parent = tab._scroll

            return {
                Get = function() return box.Text end,
                Set = function(v) box.Text = tostring(v) end,
                Destroy = function() frame:Destroy() end,
                ParentFrame = frame
            }
        end

        function tab:CreateKeybind(opts)
            opts = opts or {}
            local frame = new("KeybindFrame","Frame")
            frame.Size = UDim2.new(1,0,0,36)
            frame.BackgroundTransparency = 1

            local label = new("Label","TextLabel")
            label.Size = UDim2.new(0.6,0,1,0)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextColor3 = STYLE.Text
            label.Text = opts.Name or "Keybind"
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = frame

            local keyBtn = new("KeyBtn","TextButton")
            keyBtn.Size = UDim2.new(0.4, -8, 1, 0)
            keyBtn.Position = UDim2.new(0.6, 8, 0, 0)
            keyBtn.BackgroundColor3 = Color3.fromRGB(55,55,55)
            keyBtn.Font = Enum.Font.GothamBold
            keyBtn.TextSize = 14
            keyBtn.Text = opts.CurrentKeybind or "None"
            keyBtn.Parent = frame
            local kcorner = new("kcorner","UICorner"); kcorner.CornerRadius = UDim.new(0,6); kcorner.Parent = keyBtn

            local current = opts.CurrentKeybind or "None"
            local hold = opts.HoldToInteract or false
            local enabled = false

            local function keyPressHandler(input, gameProcessed)
                if enabled then
                    if input.KeyCode.Name == current or input.UserInputType.Name == current then
                        if hold then
                            if opts.Callback then pcall(opts.Callback, true) end
                        else
                            if opts.Callback then pcall(opts.Callback, true) end
                        end
                    end
                end
            end

            keyBtn.MouseButton1Click:Connect(function()
                keyBtn.Text = "Press Key..."
                local conn
                conn = UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Keyboard then
                        current = input.KeyCode.Name
                        keyBtn.Text = current
                        if opts.Flag then Window._flags[opts.Flag] = current end
                        if conn then conn:Disconnect() end
                    end
                end)
            end)

            -- Global listening
            UserInputService.InputBegan:Connect(function(input, gProcessed)
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    if input.KeyCode.Name == current then
                        pcall(function() if opts.Callback then opts.Callback(true) end end)
                        if hold then
                            enabled = true
                        end
                    end
                end
            end)
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    if input.KeyCode.Name == current then
                        if hold then
                            enabled = false
                            pcall(function() if opts.Callback then opts.Callback(false) end end)
                        end
                    end
                end
            end)

            tab._scroll.CanvasSize = UDim2.new(0,0,0, tab._scroll.CanvasSize.Y.Offset + frame.Size.Y.Offset)
            frame.Parent = tab._scroll

            return {
                Set = function(k)
                    current = k
                    keyBtn.Text = k
                end,
                CurrentKeybind = current,
                Destroy = function() frame:Destroy() end,
                ParentFrame = frame
            }
        end

        function tab:CreateDropdown(opts)
            opts = opts or {}
            local frame = new("Dropdown","Frame")
            frame.Size = UDim2.new(1,0,0,36)
            frame.BackgroundTransparency = 1

            local label = new("Label","TextLabel")
            label.Size = UDim2.new(0.6,0,1,0)
            label.BackgroundTransparency = 1
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextColor3 = STYLE.Text
            label.Text = opts.Name or "Dropdown"
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = frame

            local current = opts.CurrentOption or (opts.Options and opts.Options[1]) or ""
            local btn = new("Btn","TextButton")
            btn.Size = UDim2.new(0.4, -8,1,0)
            btn.Position = UDim2.new(0.6, 8, 0, 0)
            btn.BackgroundColor3 = Color3.fromRGB(50,50,50)
            btn.Font = Enum.Font.Gotham
            btn.TextSize = 13
            btn.Text = tostring(current)
            btn.Parent = frame
            local bcorner = new("bcorner","UICorner"); bcorner.CornerRadius = UDim.new(0,6); bcorner.Parent = btn

            local menu = new("Menu","Frame")
            menu.Size = UDim2.new(0,180,0,0)
            menu.Position = UDim2.new(0, 0, 0, 36)
            menu.BackgroundColor3 = Color3.fromRGB(40,40,40)
            menu.Visible = false
            local mcorner = new("mcorner","UICorner"); mcorner.CornerRadius = UDim.new(0,6); mcorner.Parent = menu
            menu.Parent = frame

            local menuScroll = new("MenuScroll","ScrollingFrame")
            menuScroll.Size = UDim2.new(1,0,1,0)
            menuScroll.BackgroundTransparency = 1
            menuScroll.ScrollBarThickness = 6
            menuScroll.Parent = menu
            local menuLayout = new("MenuLayout","UIListLayout"); menuLayout.Parent = menuScroll; menuLayout.SortOrder = Enum.SortOrder.LayoutOrder; menuLayout.Padding = UDim.new(0,6)

            local function refreshOptions(optTable, selected)
                for _, ch in pairs(menuScroll:GetChildren()) do if ch:IsA("TextButton") then ch:Destroy() end end
                for _, o in ipairs(optTable or {}) do
                    local obtn = new("Opt","TextButton")
                    obtn.Size = UDim2.new(1, -12,0,28)
                    obtn.Position = UDim2.new(0,6,0,0)
                    obtn.BackgroundColor3 = Color3.fromRGB(55,55,55)
                    obtn.Text = tostring(o)
                    obtn.TextColor3 = STYLE.Text
                    obtn.Font = Enum.Font.Gotham
                    obtn.TextSize = 13
                    obtn.Parent = menuScroll
                    local oc = new("oc","UICorner"); oc.CornerRadius = UDim.new(0,6); oc.Parent = obtn

                    obtn.MouseButton1Click:Connect(function()
                        current = o
                        btn.Text = tostring(o)
                        menu.Visible = false
                        if opts.Callback then pcall(opts.Callback, o) end
                        if opts.Flag then Window._flags[opts.Flag] = o end
                    end)
                end
                -- update menu size
                wait()
                local h = menuLayout.AbsoluteContentBounds.Y
                menu.Size = UDim2.new(0,180,0, math.clamp(h + 6, 0, 240))
            end

            btn.MouseButton1Click:Connect(function()
                menu.Visible = not menu.Visible
                refreshOptions(opts.Options or {}, opts.CurrentOption)
            end)

            tab._scroll.CanvasSize = UDim2.new(0,0,0, tab._scroll.CanvasSize.Y.Offset + frame.Size.Y.Offset)
            frame.Parent = tab._scroll

            return {
                Set = function(val) current = val; btn.Text = tostring(val) end,
                CurrentOption = current,
                Add = function(item)
                    opts.Options = opts.Options or {}
                    table.insert(opts.Options, item)
                end,
                Remove = function(item)
                    for i,v in ipairs(opts.Options or {}) do if v == item then table.remove(opts.Options,i); break end end
                end,
                Refresh = function(tbl, selected) opts.Options = tbl; refreshOptions(tbl, selected) end,
                Destroy = function() frame:Destroy() end,
                ParentFrame = frame
            }
        end

        function tab:CreateColorPicker(opts)
            opts = opts or {}
            local frame = new("ColorFrame","Frame")
            frame.Size = UDim2.new(1,0,0,72)
            frame.BackgroundTransparency = 1

            local title = new("Title","TextLabel")
            title.Size = UDim2.new(1,0,0,18)
            title.BackgroundTransparency = 1
            title.Text = opts.Name or "ColorPicker"
            title.Font = Enum.Font.Gotham
            title.TextSize = 14
            title.TextColor3 = STYLE.Text
            title.TextXAlignment = Enum.TextXAlignment.Left
            title.Parent = frame

            local preview = new("Preview","Frame")
            preview.Size = UDim2.new(0,44,0,44)
            preview.Position = UDim2.new(0,0,0,20)
            preview.BackgroundColor3 = opts.Color or Color3.fromRGB(255,255,255)
            local pc = new("pc","UICorner"); pc.CornerRadius = UDim.new(0,8); pc.Parent = preview
            preview.Parent = frame

            -- A very simple HSV slider would be more work - keep a palette simple
            local palette = new("Palette","Frame")
            palette.Size = UDim2.new(1, -56, 0, 44)
            palette.Position = UDim2.new(0,56,0,20)
            palette.BackgroundColor3 = Color3.fromRGB(60,60,60)
            local palc = new("palc","UICorner"); palc.CornerRadius = UDim.new(0,8); palc.Parent = palette
            palette.Parent = frame

            -- We'll add a few preset color buttons
            local presets = {
                Color3.fromRGB(255, 59, 48),
                Color3.fromRGB(255,149,0),
                Color3.fromRGB(255,204,0),
                Color3.fromRGB(76,217,100),
                Color3.fromRGB(90,200,250),
                Color3.fromRGB(88,86,214),
                Color3.fromRGB(255,45,85)
            }

            local spacing = 6
            local btnW = (palette.Size.X.Offset - spacing * (#presets + 1)) / #presets
            local x = 6
            for i,c in ipairs(presets) do
                local pbtn = new("p"..i,"TextButton")
                pbtn.Size = UDim2.new(0, 36, 0, 36)
                pbtn.Position = UDim2.new(0, x, 0, 4)
                pbtn.BackgroundColor3 = c
                pbtn.Parent = palette
                local pc = new("corn","UICorner"); pc.CornerRadius = UDim.new(0,6); pc.Parent = pbtn
                x = x + 36 + 6
                pbtn.MouseButton1Click:Connect(function()
                    preview.BackgroundColor3 = c
                    if opts.Callback then pcall(opts.Callback, c) end
                    if opts.Flag then Window._flags[opts.Flag] = c end
                end)
            end

            tab._scroll.CanvasSize = UDim2.new(0,0,0, tab._scroll.CanvasSize.Y.Offset + frame.Size.Y.Offset)
            frame.Parent = tab._scroll

            return {
                Set = function(c) preview.BackgroundColor3 = c end,
                Destroy = function() frame:Destroy() end,
                ParentFrame = frame
            }
        end

        -- Notification helper (global on window)
        function Window:Notify(opts)
            opts = opts or {}
            local notif = new("Notif","Frame")
            notif.Size = UDim2.new(0, 300, 0, 72)
            notif.Position = UDim2.new(1, -320, 0, 32 + (#(Window._notifs or {}) * 84))
            notif.BackgroundColor3 = Color3.fromRGB(42, 42, 44)
            notif.Parent = ScreenGui
            local ncorner = new("ncorner","UICorner"); ncorner.CornerRadius = UDim.new(0,8); ncorner.Parent = notif

            local title = new("Title","TextLabel"); title.Size = UDim2.new(1, -12, 0, 20); title.Position = UDim2.new(0, 8, 0, 8); title.BackgroundTransparency = 1; title.Font = Enum.Font.GothamBold; title.TextSize = 14; title.TextColor3 = STYLE.Text; title.Text = opts.Title or "Notification"; title.Parent = notif
            local content = new("Content","TextLabel"); content.Size = UDim2.new(1, -12, 0, 36); content.Position = UDim2.new(0, 8, 0, 28); content.BackgroundTransparency = 1; content.Font = Enum.Font.Gotham; content.TextSize = 13; content.TextColor3 = STYLE.SubText; content.Text = opts.Content or ""; content.TextWrapped = true; content.Parent = notif

            -- Actions (buttons)
            if opts.Actions then
                local i = 0
                for k,v in pairs(opts.Actions) do
                    i = i + 1
                    local abtn = new("Action"..i,"TextButton")
                    abtn.Size = UDim2.new(0, 76, 0, 26)
                    abtn.Position = UDim2.new(1, -88*i, 1, -34)
                    abtn.AnchorPoint = Vector2.new(1,0)
                    abtn.BackgroundColor3 = STYLE.Accent
                    abtn.Font = Enum.Font.GothamBold
                    abtn.Text = v.Name or "OK"
                    abtn.Parent = notif
                    local ac = new("ac","UICorner"); ac.CornerRadius = UDim.new(0,6); ac.Parent = abtn
                    abtn.MouseButton1Click:Connect(function()
                        if v.Callback then pcall(v.Callback) end
                        notif:Destroy()
                    end)
                end
            end

            spawn(function()
                wait(opts.Duration or 4)
                if notif and notif.Parent then
                    notif:Destroy()
                end
            end)
            Window._notifs = Window._notifs or {}
            table.insert(Window._notifs, notif)
        end

        -- Attach convenience methods to tab
        function tab:CreateToggle(...) return tab:CreateToggle(...) end
        function tab:CreateSlider(...) return tab:CreateSlider(...) end
        function tab:CreateButton(...) return tab:CreateButton(...) end
        function tab:CreateDropdown(...) return tab:CreateDropdown(...) end
        function tab:CreateInput(...) return tab:CreateInput(...) end
        function tab:CreateKeybind(...) return tab:CreateKeybind(...) end
        function tab:CreateLabel(...) return tab:CreateLabel(...) end
        function tab:CreateParagraph(...) return tab:CreateParagraph(...) end
        function tab:CreateColorPicker(...) return tab:CreateColorPicker(...) end

        self._tabs[#self._tabs+1] = {page = page, btn = btn, tab = tab}
        -- Auto-open first tab
        if #self._tabs == 1 then
            btn:MouseButton1Click()
        end

        return tab
    end

    -- ScriptHub utility: you can pass a table of scripts (Name, Description, Callback or Url) and it builds a searchable list
    function Window:CreateScriptHub(scriptsTable)
        scriptsTable = scriptsTable or {}
        -- create a dedicated tab
        local hubTab = self:CreateTab("Scripts")
        local sec = hubTab:CreateSection("Script Hub")

        -- Scrolling list already present in tab; we'll add a search-connected listing
        local listFrame = new("ScriptsList","Frame")
        listFrame.Size = UDim2.new(1,0,0,300)
        listFrame.BackgroundTransparency = 1

        local scroll = new("Scroll","ScrollingFrame")
        scroll.Size = UDim2.new(1,0,1,0)
        scroll.BackgroundTransparency = 1
        scroll.ScrollBarThickness = 6
        scroll.Parent = listFrame
        local layout = new("Layout","UIListLayout"); layout.Parent = scroll; layout.SortOrder = Enum.SortOrder.LayoutOrder; layout.Padding = UDim.new(0,6)

        local function populate(filter)
            for _, ch in pairs(scroll:GetChildren()) do if ch:IsA("TextButton") or ch:IsA("Frame") and ch.Name:match("^Item") then ch:Destroy() end end
            for i, s in ipairs(scriptsTable) do
                if not filter or filter == "" or s.Name:lower():find(filter:lower()) or (s.Description and s.Description:lower():find(filter:lower())) then
                    local item = new("Item"..i,"Frame")
                    item.Name = "Item"..i
                    item.Size = UDim2.new(1,0,0,60)
                    item.BackgroundTransparency = 0
                    item.BackgroundColor3 = Color3.fromRGB(40,40,40)
                    local uc = new("uc","UICorner"); uc.CornerRadius = UDim.new(0,8); uc.Parent = item
                    local title = new("Title","TextLabel"); title.Size = UDim2.new(0.6,0,0,22); title.Position = UDim2.new(0,8,0,6); title.BackgroundTransparency = 1; title.Font = Enum.Font.GothamBold; title.TextSize=14; title.TextColor3=STYLE.Text; title.Text = s.Name; title.Parent = item
                    local desc = new("Desc","TextLabel"); desc.Size = UDim2.new(1, -16, 0, 24); desc.Position = UDim2.new(0,8,0,28); desc.BackgroundTransparency = 1; desc.Font = Enum.Font.Gotham; desc.TextSize=12; desc.TextColor3=STYLE.SubText; desc.Text = s.Description or ""; desc.TextWrapped=true; desc.Parent = item
                    local runBtn = new("Run","TextButton"); runBtn.Size = UDim2.new(0,72,0,28); runBtn.Position = UDim2.new(1,-80,0.5,-14); runBtn.AnchorPoint = Vector2.new(1,0.5); runBtn.BackgroundColor3 = STYLE.Accent; runBtn.Font = Enum.Font.GothamBold; runBtn.TextSize=13; runBtn.Text="Run"; runBtn.Parent = item
                    local rc = new("rc","UICorner"); rc.CornerRadius = UDim.new(0,6); rc.Parent = runBtn

                    runBtn.MouseButton1Click:Connect(function()
                        if s.Callback then
                            pcall(function() s.Callback() end)
                        elseif s.Url then
                            -- try to load url
                            local ok, res = pcall(function() return loadstring(game:HttpGet(s.Url))() end)
                            if not ok then warn("Failed to load script:", res) end
                        end
                    end)

                    item.Parent = scroll
                end
            end
        end

        sec:Add(listFrame)
        -- connect search box
        SearchBox:GetPropertyChangedSignal("Text"):Connect(function()
            populate(SearchBox.Text)
        end)
        populate("")
        return {
            Populate = function(tbl) scriptsTable = tbl; populate(SearchBox.Text) end
        }
    end

    -- Config save/load
    function Window:SaveConfiguration()
        if not self._config.Enabled then return false end
        local ok, json = pcall(function() return game:GetService("HttpService"):JSONEncode(self._flags) end)
        if not ok then return false end
        local filename = (self._config.FolderName and (self._config.FolderName .. "/") or "") .. self._config.FileName .. ".json"
        return safeWrite(filename, json)
    end

    function Window:LoadConfiguration()
        if not self._config.Enabled then return false end
        local filename = (self._config.FolderName and (self._config.FolderName .. "/") or "") .. self._config.FileName .. ".json"
        local data = safeRead(filename)
        if not data then return false end
        local ok, tbl = pcall(function() return game:GetService("HttpService"):JSONDecode(data) end)
        if not ok then return false end
        -- apply flags: attempt to set element values where possible
        for k,v in pairs(tbl) do
            self._flags[k] = v
        end
        return true
    end

    function Window:Destroy()
        if self._screen and self._screen.Parent then
            self._screen:Destroy()
        end
    end

    -- Attach window-level functions (create tab is above)
    setmetatable(Window, {__index = MyUI})
    return Window
end

return MyUI
