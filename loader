-- Universal Script Hub - Fixed Loader
-- This properly works with the fixed UI library

-- Load the fixed UI library
local Lynk = loadstring(game:HttpGet("https://raw.githubusercontent.com/vvisuall/lynkUI/refs/heads/main/source-fixed"))()

-- Create window and let the library handle key system internally
local Window = Lynk:CreateWindow({
    Name = "Universal Script Hub",
    Title = "LYNK | No.1 Scripthub", 
    Subtitle = "Find any script for any game | Made by @x_vvw on Discord",
    Accent = Color3.fromRGB(88, 101, 242),
    DefaultKeybind = Enum.KeyCode.Insert
})

-- Remove immediate Window:Show() call since the library handles this
-- The library will show the key system first, then show the main UI after validation

-- Load script database from GitHub with proper error handling
local function loadScriptDatabase()
    local success, result = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/vvisuall/lynkUI/refs/heads/main/scripts.lua"))()
    end)
    
    if success and result then
        print("‚úÖ Script database loaded successfully!")
        return result
    else
        print("‚ùå Failed to load script database:", result)
        -- Fallback database with correct property names
        return {
            ["Universal"] = {
                gameName = "Universal Scripts",
                scripts = {
                    {
                        Title = "Infinite Yield", 
                        Description = "Admin commands for any game", 
                        LoadString = 'loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()', 
                        RequiresKey = false
                    },
                    {
                        Title = "Fly Script", 
                        Description = "Universal fly script", 
                        LoadString = 'print("Fly script would execute here")', 
                        RequiresKey = false
                    },
                    {
                        Title = "ESP Script", 
                        Description = "See players through walls", 
                        LoadString = 'print("ESP script would execute here")', 
                        RequiresKey = false
                    }
                }
            }
        }
    end
end

-- Load the database
local SCRIPT_DATABASE = loadScriptDatabase()

-- Wait for UI to be ready before setting up tabs
spawn(function()
    -- Wait for either key system completion or immediate load
    while not Window.Visible do
        wait(0.1)
    end
    
    -- Now set up tabs since UI is ready
    local HomeTab = Window:CreateTab("Home", "rbxassetid://10734950309")
    local UpdatesTab = Window:CreateTab("Updates", "rbxassetid://10734949856")
    local CreditsTab = Window:CreateTab("Credits", "rbxassetid://10734949856") 
    local SettingsTab = Window:CreateTab("Settings", "rbxassetid://10734950020")
    
    -- Add script cards to Home tab
    for gameName, gameData in pairs(SCRIPT_DATABASE) do
        HomeTab:CreateLabel("üéÆ " .. gameData.gameName)
        
        for _, script in pairs(gameData.scripts) do
            HomeTab:CreateButton("üìú " .. script.Title, function()
                print("Executing:", script.Title)
                if script.LoadString then
                    loadstring(script.LoadString)()
                end
            end)
        end
        
        HomeTab:CreateLabel("") -- Spacer
    end
    
    -- Add content to Updates tab
    UpdatesTab:CreateLabel("üöÄ Version 2.2.0 - Today")
    UpdatesTab:CreateLabel("‚Ä¢ Fixed key system UI loading issue")
    UpdatesTab:CreateLabel("‚Ä¢ Main UI now appears after key validation")
    UpdatesTab:CreateLabel("‚Ä¢ Fixed Insert key toggle functionality")
    UpdatesTab:CreateLabel("‚Ä¢ Improved error handling")
    UpdatesTab:CreateLabel("")
    UpdatesTab:CreateLabel("üöÄ Version 2.1.0 - Yesterday")
    UpdatesTab:CreateLabel("‚Ä¢ Fixed script card loading issues")
    UpdatesTab:CreateLabel("‚Ä¢ Corrected database property names")
    UpdatesTab:CreateLabel("‚Ä¢ Improved GitHub integration")
    
    -- Add content to Credits tab
    CreditsTab:CreateLabel("üöÄ LYNK Script Hub v2.2")
    CreditsTab:CreateLabel("")
    CreditsTab:CreateLabel("üë®‚Äçüíª Development Team:")
    CreditsTab:CreateLabel("‚Ä¢ @x_vvw - Lead Developer")
    CreditsTab:CreateLabel("‚Ä¢ Script Hub Community")
    CreditsTab:CreateLabel("")
    CreditsTab:CreateLabel("üé® Features:")
    CreditsTab:CreateLabel("‚Ä¢ Fixed key system integration")
    CreditsTab:CreateLabel("‚Ä¢ Auto game detection")
    CreditsTab:CreateLabel("‚Ä¢ Professional card layout")
    CreditsTab:CreateLabel("‚Ä¢ Smart search system")
    CreditsTab:CreateLabel("")
    CreditsTab:CreateLabel("https://discord.gg/AzMbjqD7T3")
    
    -- Add content to Settings tab
    SettingsTab:CreateButton("üîÑ Refresh Database", function()
        print("Refreshing script database...")
        SCRIPT_DATABASE = loadScriptDatabase()
        print("‚úÖ Database refreshed!")
    end)
    
    SettingsTab:CreateButton("‚å®Ô∏è Toggle Key: Insert", function()
        print("Current toggle key: Insert")
        print("Key binding customization coming soon!")
    end)
    
    SettingsTab:CreateButton("üé® Theme Settings", function()
        print("Theme customization coming soon!")
    end)
    
    SettingsTab:CreateButton("üîë Valid Keys", function()
        print("Valid keys for testing:")
        print("‚Ä¢ LYNK-2024-PREMIUM")
        print("‚Ä¢ SCRIPTHUB-VIP-ACCESS") 
        print("‚Ä¢ UNIVERSAL-KEY-2024")
    end)
    
    -- Inject database into window for script loading
    Window._scriptDatabase = SCRIPT_DATABASE
    
    print("üéâ LYNK Script Hub loaded successfully!")
    print("üì± Press Insert to toggle the UI")
    print("üîç Script cards loaded and ready!")
end)

-- Show current game info
spawn(function()
    wait(2)
    local currentPlaceId = game.PlaceId
    local success, gameInfo = pcall(function()
        return game:GetService("MarketplaceService"):GetProductInfo(currentPlaceId)
    end)
    
    if success then
        print("üéÆ Current Game:", gameInfo.Name)
        if SCRIPT_DATABASE[tostring(currentPlaceId)] then
            local scriptCount = #SCRIPT_DATABASE[tostring(currentPlaceId)].scripts
            print("üìù Found", scriptCount, "scripts for this game!")
        else
            print("üìù No specific scripts for this game, showing Universal scripts")
        end
    end
end)
